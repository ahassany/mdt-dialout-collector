// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: huawei_telemetry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_huawei_5ftelemetry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_huawei_5ftelemetry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_huawei_5ftelemetry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_huawei_5ftelemetry_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_huawei_5ftelemetry_2eproto;
namespace huawei_telemetry {
class DataPath;
struct DataPathDefaultTypeInternal;
extern DataPathDefaultTypeInternal _DataPath_default_instance_;
class Generator;
struct GeneratorDefaultTypeInternal;
extern GeneratorDefaultTypeInternal _Generator_default_instance_;
class Path;
struct PathDefaultTypeInternal;
extern PathDefaultTypeInternal _Path_default_instance_;
class PathElem;
struct PathElemDefaultTypeInternal;
extern PathElemDefaultTypeInternal _PathElem_default_instance_;
class PathElem_KeyEntry_DoNotUse;
struct PathElem_KeyEntry_DoNotUseDefaultTypeInternal;
extern PathElem_KeyEntry_DoNotUseDefaultTypeInternal _PathElem_KeyEntry_DoNotUse_default_instance_;
class Telemetry;
struct TelemetryDefaultTypeInternal;
extern TelemetryDefaultTypeInternal _Telemetry_default_instance_;
class TelemetryGPBTable;
struct TelemetryGPBTableDefaultTypeInternal;
extern TelemetryGPBTableDefaultTypeInternal _TelemetryGPBTable_default_instance_;
class TelemetryRowGPB;
struct TelemetryRowGPBDefaultTypeInternal;
extern TelemetryRowGPBDefaultTypeInternal _TelemetryRowGPB_default_instance_;
class TelemetrySelfDefineThresTable;
struct TelemetrySelfDefineThresTableDefaultTypeInternal;
extern TelemetrySelfDefineThresTableDefaultTypeInternal _TelemetrySelfDefineThresTable_default_instance_;
class TelemetrySelfDefinedEvent;
struct TelemetrySelfDefinedEventDefaultTypeInternal;
extern TelemetrySelfDefinedEventDefaultTypeInternal _TelemetrySelfDefinedEvent_default_instance_;
class TelemetryThreshold;
struct TelemetryThresholdDefaultTypeInternal;
extern TelemetryThresholdDefaultTypeInternal _TelemetryThreshold_default_instance_;
}  // namespace huawei_telemetry
PROTOBUF_NAMESPACE_OPEN
template<> ::huawei_telemetry::DataPath* Arena::CreateMaybeMessage<::huawei_telemetry::DataPath>(Arena*);
template<> ::huawei_telemetry::Generator* Arena::CreateMaybeMessage<::huawei_telemetry::Generator>(Arena*);
template<> ::huawei_telemetry::Path* Arena::CreateMaybeMessage<::huawei_telemetry::Path>(Arena*);
template<> ::huawei_telemetry::PathElem* Arena::CreateMaybeMessage<::huawei_telemetry::PathElem>(Arena*);
template<> ::huawei_telemetry::PathElem_KeyEntry_DoNotUse* Arena::CreateMaybeMessage<::huawei_telemetry::PathElem_KeyEntry_DoNotUse>(Arena*);
template<> ::huawei_telemetry::Telemetry* Arena::CreateMaybeMessage<::huawei_telemetry::Telemetry>(Arena*);
template<> ::huawei_telemetry::TelemetryGPBTable* Arena::CreateMaybeMessage<::huawei_telemetry::TelemetryGPBTable>(Arena*);
template<> ::huawei_telemetry::TelemetryRowGPB* Arena::CreateMaybeMessage<::huawei_telemetry::TelemetryRowGPB>(Arena*);
template<> ::huawei_telemetry::TelemetrySelfDefineThresTable* Arena::CreateMaybeMessage<::huawei_telemetry::TelemetrySelfDefineThresTable>(Arena*);
template<> ::huawei_telemetry::TelemetrySelfDefinedEvent* Arena::CreateMaybeMessage<::huawei_telemetry::TelemetrySelfDefinedEvent>(Arena*);
template<> ::huawei_telemetry::TelemetryThreshold* Arena::CreateMaybeMessage<::huawei_telemetry::TelemetryThreshold>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace huawei_telemetry {

enum Telemetry_Encoding : int {
  Telemetry_Encoding_Encoding_GPB = 0,
  Telemetry_Encoding_Encoding_JSON = 1,
  Telemetry_Encoding_Telemetry_Encoding_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Telemetry_Encoding_Telemetry_Encoding_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Telemetry_Encoding_IsValid(int value);
constexpr Telemetry_Encoding Telemetry_Encoding_Encoding_MIN = Telemetry_Encoding_Encoding_GPB;
constexpr Telemetry_Encoding Telemetry_Encoding_Encoding_MAX = Telemetry_Encoding_Encoding_JSON;
constexpr int Telemetry_Encoding_Encoding_ARRAYSIZE = Telemetry_Encoding_Encoding_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Telemetry_Encoding_descriptor();
template<typename T>
inline const std::string& Telemetry_Encoding_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Telemetry_Encoding>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Telemetry_Encoding_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Telemetry_Encoding_descriptor(), enum_t_value);
}
inline bool Telemetry_Encoding_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Telemetry_Encoding* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Telemetry_Encoding>(
    Telemetry_Encoding_descriptor(), name, value);
}
enum TelemetrySelfDefinedEvent_ThresholdRelation : int {
  TelemetrySelfDefinedEvent_ThresholdRelation_ThresholdRelation_INVALID = 0,
  TelemetrySelfDefinedEvent_ThresholdRelation_ThresholdRelation_AND = 1,
  TelemetrySelfDefinedEvent_ThresholdRelation_ThresholdRelation_OR = 2,
  TelemetrySelfDefinedEvent_ThresholdRelation_TelemetrySelfDefinedEvent_ThresholdRelation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TelemetrySelfDefinedEvent_ThresholdRelation_TelemetrySelfDefinedEvent_ThresholdRelation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TelemetrySelfDefinedEvent_ThresholdRelation_IsValid(int value);
constexpr TelemetrySelfDefinedEvent_ThresholdRelation TelemetrySelfDefinedEvent_ThresholdRelation_ThresholdRelation_MIN = TelemetrySelfDefinedEvent_ThresholdRelation_ThresholdRelation_INVALID;
constexpr TelemetrySelfDefinedEvent_ThresholdRelation TelemetrySelfDefinedEvent_ThresholdRelation_ThresholdRelation_MAX = TelemetrySelfDefinedEvent_ThresholdRelation_ThresholdRelation_OR;
constexpr int TelemetrySelfDefinedEvent_ThresholdRelation_ThresholdRelation_ARRAYSIZE = TelemetrySelfDefinedEvent_ThresholdRelation_ThresholdRelation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TelemetrySelfDefinedEvent_ThresholdRelation_descriptor();
template<typename T>
inline const std::string& TelemetrySelfDefinedEvent_ThresholdRelation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TelemetrySelfDefinedEvent_ThresholdRelation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TelemetrySelfDefinedEvent_ThresholdRelation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TelemetrySelfDefinedEvent_ThresholdRelation_descriptor(), enum_t_value);
}
inline bool TelemetrySelfDefinedEvent_ThresholdRelation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TelemetrySelfDefinedEvent_ThresholdRelation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TelemetrySelfDefinedEvent_ThresholdRelation>(
    TelemetrySelfDefinedEvent_ThresholdRelation_descriptor(), name, value);
}
enum TelemetryThreshold_ThresholdOpType : int {
  TelemetryThreshold_ThresholdOpType_ThresholdOpType_EQ = 0,
  TelemetryThreshold_ThresholdOpType_ThresholdOpType_GT = 1,
  TelemetryThreshold_ThresholdOpType_ThresholdOpType_GE = 2,
  TelemetryThreshold_ThresholdOpType_ThresholdOpType_LT = 3,
  TelemetryThreshold_ThresholdOpType_ThresholdOpType_LE = 4,
  TelemetryThreshold_ThresholdOpType_TelemetryThreshold_ThresholdOpType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TelemetryThreshold_ThresholdOpType_TelemetryThreshold_ThresholdOpType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TelemetryThreshold_ThresholdOpType_IsValid(int value);
constexpr TelemetryThreshold_ThresholdOpType TelemetryThreshold_ThresholdOpType_ThresholdOpType_MIN = TelemetryThreshold_ThresholdOpType_ThresholdOpType_EQ;
constexpr TelemetryThreshold_ThresholdOpType TelemetryThreshold_ThresholdOpType_ThresholdOpType_MAX = TelemetryThreshold_ThresholdOpType_ThresholdOpType_LE;
constexpr int TelemetryThreshold_ThresholdOpType_ThresholdOpType_ARRAYSIZE = TelemetryThreshold_ThresholdOpType_ThresholdOpType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TelemetryThreshold_ThresholdOpType_descriptor();
template<typename T>
inline const std::string& TelemetryThreshold_ThresholdOpType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TelemetryThreshold_ThresholdOpType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TelemetryThreshold_ThresholdOpType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TelemetryThreshold_ThresholdOpType_descriptor(), enum_t_value);
}
inline bool TelemetryThreshold_ThresholdOpType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TelemetryThreshold_ThresholdOpType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TelemetryThreshold_ThresholdOpType>(
    TelemetryThreshold_ThresholdOpType_descriptor(), name, value);
}
// ===================================================================

class Telemetry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:huawei_telemetry.Telemetry) */ {
 public:
  inline Telemetry() : Telemetry(nullptr) {}
  ~Telemetry() override;
  explicit constexpr Telemetry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Telemetry(const Telemetry& from);
  Telemetry(Telemetry&& from) noexcept
    : Telemetry() {
    *this = ::std::move(from);
  }

  inline Telemetry& operator=(const Telemetry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Telemetry& operator=(Telemetry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Telemetry& default_instance() {
    return *internal_default_instance();
  }
  static inline const Telemetry* internal_default_instance() {
    return reinterpret_cast<const Telemetry*>(
               &_Telemetry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Telemetry& a, Telemetry& b) {
    a.Swap(&b);
  }
  inline void Swap(Telemetry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Telemetry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Telemetry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Telemetry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Telemetry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Telemetry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Telemetry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "huawei_telemetry.Telemetry";
  }
  protected:
  explicit Telemetry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Telemetry_Encoding Encoding;
  static constexpr Encoding Encoding_GPB =
    Telemetry_Encoding_Encoding_GPB;
  static constexpr Encoding Encoding_JSON =
    Telemetry_Encoding_Encoding_JSON;
  static inline bool Encoding_IsValid(int value) {
    return Telemetry_Encoding_IsValid(value);
  }
  static constexpr Encoding Encoding_MIN =
    Telemetry_Encoding_Encoding_MIN;
  static constexpr Encoding Encoding_MAX =
    Telemetry_Encoding_Encoding_MAX;
  static constexpr int Encoding_ARRAYSIZE =
    Telemetry_Encoding_Encoding_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Encoding_descriptor() {
    return Telemetry_Encoding_descriptor();
  }
  template<typename T>
  static inline const std::string& Encoding_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Encoding>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Encoding_Name.");
    return Telemetry_Encoding_Name(enum_t_value);
  }
  static inline bool Encoding_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Encoding* value) {
    return Telemetry_Encoding_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdStrFieldNumber = 1,
    kSubscriptionIdStrFieldNumber = 2,
    kSensorPathFieldNumber = 3,
    kExceptDescFieldNumber = 10,
    kProductNameFieldNumber = 11,
    kProtoPathFieldNumber = 13,
    kDataStrFieldNumber = 14,
    kNeIdFieldNumber = 15,
    kSoftwareVersionFieldNumber = 16,
    kDataGpbFieldNumber = 7,
    kCollectionIdFieldNumber = 4,
    kCollectionStartTimeFieldNumber = 5,
    kMsgTimestampFieldNumber = 6,
    kCollectionEndTimeFieldNumber = 8,
    kCurrentPeriodFieldNumber = 9,
    kEncodingFieldNumber = 12,
  };
  // string node_id_str = 1;
  void clear_node_id_str();
  const std::string& node_id_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_node_id_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_node_id_str();
  PROTOBUF_NODISCARD std::string* release_node_id_str();
  void set_allocated_node_id_str(std::string* node_id_str);
  private:
  const std::string& _internal_node_id_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_id_str(const std::string& value);
  std::string* _internal_mutable_node_id_str();
  public:

  // string subscription_id_str = 2;
  void clear_subscription_id_str();
  const std::string& subscription_id_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subscription_id_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subscription_id_str();
  PROTOBUF_NODISCARD std::string* release_subscription_id_str();
  void set_allocated_subscription_id_str(std::string* subscription_id_str);
  private:
  const std::string& _internal_subscription_id_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subscription_id_str(const std::string& value);
  std::string* _internal_mutable_subscription_id_str();
  public:

  // string sensor_path = 3;
  void clear_sensor_path();
  const std::string& sensor_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sensor_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sensor_path();
  PROTOBUF_NODISCARD std::string* release_sensor_path();
  void set_allocated_sensor_path(std::string* sensor_path);
  private:
  const std::string& _internal_sensor_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sensor_path(const std::string& value);
  std::string* _internal_mutable_sensor_path();
  public:

  // string except_desc = 10;
  void clear_except_desc();
  const std::string& except_desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_except_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_except_desc();
  PROTOBUF_NODISCARD std::string* release_except_desc();
  void set_allocated_except_desc(std::string* except_desc);
  private:
  const std::string& _internal_except_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_except_desc(const std::string& value);
  std::string* _internal_mutable_except_desc();
  public:

  // string product_name = 11;
  void clear_product_name();
  const std::string& product_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_product_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_product_name();
  PROTOBUF_NODISCARD std::string* release_product_name();
  void set_allocated_product_name(std::string* product_name);
  private:
  const std::string& _internal_product_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_product_name(const std::string& value);
  std::string* _internal_mutable_product_name();
  public:

  // string proto_path = 13;
  void clear_proto_path();
  const std::string& proto_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proto_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proto_path();
  PROTOBUF_NODISCARD std::string* release_proto_path();
  void set_allocated_proto_path(std::string* proto_path);
  private:
  const std::string& _internal_proto_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proto_path(const std::string& value);
  std::string* _internal_mutable_proto_path();
  public:

  // string data_str = 14;
  void clear_data_str();
  const std::string& data_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data_str();
  PROTOBUF_NODISCARD std::string* release_data_str();
  void set_allocated_data_str(std::string* data_str);
  private:
  const std::string& _internal_data_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_str(const std::string& value);
  std::string* _internal_mutable_data_str();
  public:

  // string ne_id = 15;
  void clear_ne_id();
  const std::string& ne_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ne_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ne_id();
  PROTOBUF_NODISCARD std::string* release_ne_id();
  void set_allocated_ne_id(std::string* ne_id);
  private:
  const std::string& _internal_ne_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ne_id(const std::string& value);
  std::string* _internal_mutable_ne_id();
  public:

  // string software_version = 16;
  void clear_software_version();
  const std::string& software_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_software_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_software_version();
  PROTOBUF_NODISCARD std::string* release_software_version();
  void set_allocated_software_version(std::string* software_version);
  private:
  const std::string& _internal_software_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_software_version(const std::string& value);
  std::string* _internal_mutable_software_version();
  public:

  // .huawei_telemetry.TelemetryGPBTable data_gpb = 7;
  bool has_data_gpb() const;
  private:
  bool _internal_has_data_gpb() const;
  public:
  void clear_data_gpb();
  const ::huawei_telemetry::TelemetryGPBTable& data_gpb() const;
  PROTOBUF_NODISCARD ::huawei_telemetry::TelemetryGPBTable* release_data_gpb();
  ::huawei_telemetry::TelemetryGPBTable* mutable_data_gpb();
  void set_allocated_data_gpb(::huawei_telemetry::TelemetryGPBTable* data_gpb);
  private:
  const ::huawei_telemetry::TelemetryGPBTable& _internal_data_gpb() const;
  ::huawei_telemetry::TelemetryGPBTable* _internal_mutable_data_gpb();
  public:
  void unsafe_arena_set_allocated_data_gpb(
      ::huawei_telemetry::TelemetryGPBTable* data_gpb);
  ::huawei_telemetry::TelemetryGPBTable* unsafe_arena_release_data_gpb();

  // uint64 collection_id = 4;
  void clear_collection_id();
  uint64_t collection_id() const;
  void set_collection_id(uint64_t value);
  private:
  uint64_t _internal_collection_id() const;
  void _internal_set_collection_id(uint64_t value);
  public:

  // uint64 collection_start_time = 5;
  void clear_collection_start_time();
  uint64_t collection_start_time() const;
  void set_collection_start_time(uint64_t value);
  private:
  uint64_t _internal_collection_start_time() const;
  void _internal_set_collection_start_time(uint64_t value);
  public:

  // uint64 msg_timestamp = 6;
  void clear_msg_timestamp();
  uint64_t msg_timestamp() const;
  void set_msg_timestamp(uint64_t value);
  private:
  uint64_t _internal_msg_timestamp() const;
  void _internal_set_msg_timestamp(uint64_t value);
  public:

  // uint64 collection_end_time = 8;
  void clear_collection_end_time();
  uint64_t collection_end_time() const;
  void set_collection_end_time(uint64_t value);
  private:
  uint64_t _internal_collection_end_time() const;
  void _internal_set_collection_end_time(uint64_t value);
  public:

  // uint32 current_period = 9;
  void clear_current_period();
  uint32_t current_period() const;
  void set_current_period(uint32_t value);
  private:
  uint32_t _internal_current_period() const;
  void _internal_set_current_period(uint32_t value);
  public:

  // .huawei_telemetry.Telemetry.Encoding encoding = 12;
  void clear_encoding();
  ::huawei_telemetry::Telemetry_Encoding encoding() const;
  void set_encoding(::huawei_telemetry::Telemetry_Encoding value);
  private:
  ::huawei_telemetry::Telemetry_Encoding _internal_encoding() const;
  void _internal_set_encoding(::huawei_telemetry::Telemetry_Encoding value);
  public:

  // @@protoc_insertion_point(class_scope:huawei_telemetry.Telemetry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_str_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_id_str_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sensor_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr except_desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_str_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ne_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr software_version_;
  ::huawei_telemetry::TelemetryGPBTable* data_gpb_;
  uint64_t collection_id_;
  uint64_t collection_start_time_;
  uint64_t msg_timestamp_;
  uint64_t collection_end_time_;
  uint32_t current_period_;
  int encoding_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_huawei_5ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class TelemetryGPBTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:huawei_telemetry.TelemetryGPBTable) */ {
 public:
  inline TelemetryGPBTable() : TelemetryGPBTable(nullptr) {}
  ~TelemetryGPBTable() override;
  explicit constexpr TelemetryGPBTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TelemetryGPBTable(const TelemetryGPBTable& from);
  TelemetryGPBTable(TelemetryGPBTable&& from) noexcept
    : TelemetryGPBTable() {
    *this = ::std::move(from);
  }

  inline TelemetryGPBTable& operator=(const TelemetryGPBTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TelemetryGPBTable& operator=(TelemetryGPBTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TelemetryGPBTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const TelemetryGPBTable* internal_default_instance() {
    return reinterpret_cast<const TelemetryGPBTable*>(
               &_TelemetryGPBTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TelemetryGPBTable& a, TelemetryGPBTable& b) {
    a.Swap(&b);
  }
  inline void Swap(TelemetryGPBTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TelemetryGPBTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TelemetryGPBTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TelemetryGPBTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TelemetryGPBTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TelemetryGPBTable& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TelemetryGPBTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "huawei_telemetry.TelemetryGPBTable";
  }
  protected:
  explicit TelemetryGPBTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowFieldNumber = 1,
    kDeleteFieldNumber = 2,
    kGeneratorFieldNumber = 3,
  };
  // repeated .huawei_telemetry.TelemetryRowGPB row = 1;
  int row_size() const;
  private:
  int _internal_row_size() const;
  public:
  void clear_row();
  ::huawei_telemetry::TelemetryRowGPB* mutable_row(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::huawei_telemetry::TelemetryRowGPB >*
      mutable_row();
  private:
  const ::huawei_telemetry::TelemetryRowGPB& _internal_row(int index) const;
  ::huawei_telemetry::TelemetryRowGPB* _internal_add_row();
  public:
  const ::huawei_telemetry::TelemetryRowGPB& row(int index) const;
  ::huawei_telemetry::TelemetryRowGPB* add_row();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::huawei_telemetry::TelemetryRowGPB >&
      row() const;

  // repeated .huawei_telemetry.DataPath delete = 2;
  int delete__size() const;
  private:
  int _internal_delete__size() const;
  public:
  void clear_delete_();
  ::huawei_telemetry::DataPath* mutable_delete_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::huawei_telemetry::DataPath >*
      mutable_delete_();
  private:
  const ::huawei_telemetry::DataPath& _internal_delete_(int index) const;
  ::huawei_telemetry::DataPath* _internal_add_delete_();
  public:
  const ::huawei_telemetry::DataPath& delete_(int index) const;
  ::huawei_telemetry::DataPath* add_delete_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::huawei_telemetry::DataPath >&
      delete_() const;

  // .huawei_telemetry.Generator generator = 3;
  bool has_generator() const;
  private:
  bool _internal_has_generator() const;
  public:
  void clear_generator();
  const ::huawei_telemetry::Generator& generator() const;
  PROTOBUF_NODISCARD ::huawei_telemetry::Generator* release_generator();
  ::huawei_telemetry::Generator* mutable_generator();
  void set_allocated_generator(::huawei_telemetry::Generator* generator);
  private:
  const ::huawei_telemetry::Generator& _internal_generator() const;
  ::huawei_telemetry::Generator* _internal_mutable_generator();
  public:
  void unsafe_arena_set_allocated_generator(
      ::huawei_telemetry::Generator* generator);
  ::huawei_telemetry::Generator* unsafe_arena_release_generator();

  // @@protoc_insertion_point(class_scope:huawei_telemetry.TelemetryGPBTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::huawei_telemetry::TelemetryRowGPB > row_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::huawei_telemetry::DataPath > delete__;
  ::huawei_telemetry::Generator* generator_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_huawei_5ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class Generator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:huawei_telemetry.Generator) */ {
 public:
  inline Generator() : Generator(nullptr) {}
  ~Generator() override;
  explicit constexpr Generator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Generator(const Generator& from);
  Generator(Generator&& from) noexcept
    : Generator() {
    *this = ::std::move(from);
  }

  inline Generator& operator=(const Generator& from) {
    CopyFrom(from);
    return *this;
  }
  inline Generator& operator=(Generator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Generator& default_instance() {
    return *internal_default_instance();
  }
  static inline const Generator* internal_default_instance() {
    return reinterpret_cast<const Generator*>(
               &_Generator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Generator& a, Generator& b) {
    a.Swap(&b);
  }
  inline void Swap(Generator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Generator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Generator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Generator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Generator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Generator& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Generator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "huawei_telemetry.Generator";
  }
  protected:
  explicit Generator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeneratorIdFieldNumber = 1,
    kGeneratorSnFieldNumber = 2,
    kGeneratorSyncFieldNumber = 3,
  };
  // uint64 generator_id = 1;
  void clear_generator_id();
  uint64_t generator_id() const;
  void set_generator_id(uint64_t value);
  private:
  uint64_t _internal_generator_id() const;
  void _internal_set_generator_id(uint64_t value);
  public:

  // uint32 generator_sn = 2;
  void clear_generator_sn();
  uint32_t generator_sn() const;
  void set_generator_sn(uint32_t value);
  private:
  uint32_t _internal_generator_sn() const;
  void _internal_set_generator_sn(uint32_t value);
  public:

  // bool generator_sync = 3;
  void clear_generator_sync();
  bool generator_sync() const;
  void set_generator_sync(bool value);
  private:
  bool _internal_generator_sync() const;
  void _internal_set_generator_sync(bool value);
  public:

  // @@protoc_insertion_point(class_scope:huawei_telemetry.Generator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t generator_id_;
  uint32_t generator_sn_;
  bool generator_sync_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_huawei_5ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class TelemetryRowGPB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:huawei_telemetry.TelemetryRowGPB) */ {
 public:
  inline TelemetryRowGPB() : TelemetryRowGPB(nullptr) {}
  ~TelemetryRowGPB() override;
  explicit constexpr TelemetryRowGPB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TelemetryRowGPB(const TelemetryRowGPB& from);
  TelemetryRowGPB(TelemetryRowGPB&& from) noexcept
    : TelemetryRowGPB() {
    *this = ::std::move(from);
  }

  inline TelemetryRowGPB& operator=(const TelemetryRowGPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline TelemetryRowGPB& operator=(TelemetryRowGPB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TelemetryRowGPB& default_instance() {
    return *internal_default_instance();
  }
  static inline const TelemetryRowGPB* internal_default_instance() {
    return reinterpret_cast<const TelemetryRowGPB*>(
               &_TelemetryRowGPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TelemetryRowGPB& a, TelemetryRowGPB& b) {
    a.Swap(&b);
  }
  inline void Swap(TelemetryRowGPB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TelemetryRowGPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TelemetryRowGPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TelemetryRowGPB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TelemetryRowGPB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TelemetryRowGPB& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TelemetryRowGPB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "huawei_telemetry.TelemetryRowGPB";
  }
  protected:
  explicit TelemetryRowGPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 11,
    kTimestampFieldNumber = 1,
  };
  // bytes content = 11;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // uint64 timestamp = 1;
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:huawei_telemetry.TelemetryRowGPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  uint64_t timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_huawei_5ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class DataPath final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:huawei_telemetry.DataPath) */ {
 public:
  inline DataPath() : DataPath(nullptr) {}
  ~DataPath() override;
  explicit constexpr DataPath(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataPath(const DataPath& from);
  DataPath(DataPath&& from) noexcept
    : DataPath() {
    *this = ::std::move(from);
  }

  inline DataPath& operator=(const DataPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataPath& operator=(DataPath&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataPath& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataPath* internal_default_instance() {
    return reinterpret_cast<const DataPath*>(
               &_DataPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DataPath& a, DataPath& b) {
    a.Swap(&b);
  }
  inline void Swap(DataPath* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataPath>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataPath& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DataPath& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataPath* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "huawei_telemetry.DataPath";
  }
  protected:
  explicit DataPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // .huawei_telemetry.Path path = 2;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const ::huawei_telemetry::Path& path() const;
  PROTOBUF_NODISCARD ::huawei_telemetry::Path* release_path();
  ::huawei_telemetry::Path* mutable_path();
  void set_allocated_path(::huawei_telemetry::Path* path);
  private:
  const ::huawei_telemetry::Path& _internal_path() const;
  ::huawei_telemetry::Path* _internal_mutable_path();
  public:
  void unsafe_arena_set_allocated_path(
      ::huawei_telemetry::Path* path);
  ::huawei_telemetry::Path* unsafe_arena_release_path();

  // uint64 timestamp = 1;
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:huawei_telemetry.DataPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::huawei_telemetry::Path* path_;
  uint64_t timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_huawei_5ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class Path final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:huawei_telemetry.Path) */ {
 public:
  inline Path() : Path(nullptr) {}
  ~Path() override;
  explicit constexpr Path(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Path(const Path& from);
  Path(Path&& from) noexcept
    : Path() {
    *this = ::std::move(from);
  }

  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }
  inline Path& operator=(Path&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Path& default_instance() {
    return *internal_default_instance();
  }
  static inline const Path* internal_default_instance() {
    return reinterpret_cast<const Path*>(
               &_Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Path& a, Path& b) {
    a.Swap(&b);
  }
  inline void Swap(Path* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Path* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Path* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Path>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Path& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Path& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Path* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "huawei_telemetry.Path";
  }
  protected:
  explicit Path(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
  };
  // repeated .huawei_telemetry.PathElem node = 1;
  int node_size() const;
  private:
  int _internal_node_size() const;
  public:
  void clear_node();
  ::huawei_telemetry::PathElem* mutable_node(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::huawei_telemetry::PathElem >*
      mutable_node();
  private:
  const ::huawei_telemetry::PathElem& _internal_node(int index) const;
  ::huawei_telemetry::PathElem* _internal_add_node();
  public:
  const ::huawei_telemetry::PathElem& node(int index) const;
  ::huawei_telemetry::PathElem* add_node();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::huawei_telemetry::PathElem >&
      node() const;

  // @@protoc_insertion_point(class_scope:huawei_telemetry.Path)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::huawei_telemetry::PathElem > node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_huawei_5ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class PathElem_KeyEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PathElem_KeyEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PathElem_KeyEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  PathElem_KeyEntry_DoNotUse();
  explicit constexpr PathElem_KeyEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PathElem_KeyEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PathElem_KeyEntry_DoNotUse& other);
  static const PathElem_KeyEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PathElem_KeyEntry_DoNotUse*>(&_PathElem_KeyEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "huawei_telemetry.PathElem.KeyEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "huawei_telemetry.PathElem.KeyEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class PathElem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:huawei_telemetry.PathElem) */ {
 public:
  inline PathElem() : PathElem(nullptr) {}
  ~PathElem() override;
  explicit constexpr PathElem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PathElem(const PathElem& from);
  PathElem(PathElem&& from) noexcept
    : PathElem() {
    *this = ::std::move(from);
  }

  inline PathElem& operator=(const PathElem& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathElem& operator=(PathElem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PathElem& default_instance() {
    return *internal_default_instance();
  }
  static inline const PathElem* internal_default_instance() {
    return reinterpret_cast<const PathElem*>(
               &_PathElem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PathElem& a, PathElem& b) {
    a.Swap(&b);
  }
  inline void Swap(PathElem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PathElem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PathElem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PathElem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PathElem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PathElem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathElem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "huawei_telemetry.PathElem";
  }
  protected:
  explicit PathElem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // map<string, string> key = 2;
  int key_size() const;
  private:
  int _internal_key_size() const;
  public:
  void clear_key();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_key() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_key();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      key() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_key();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:huawei_telemetry.PathElem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PathElem_KeyEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_huawei_5ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class TelemetrySelfDefinedEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:huawei_telemetry.TelemetrySelfDefinedEvent) */ {
 public:
  inline TelemetrySelfDefinedEvent() : TelemetrySelfDefinedEvent(nullptr) {}
  ~TelemetrySelfDefinedEvent() override;
  explicit constexpr TelemetrySelfDefinedEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TelemetrySelfDefinedEvent(const TelemetrySelfDefinedEvent& from);
  TelemetrySelfDefinedEvent(TelemetrySelfDefinedEvent&& from) noexcept
    : TelemetrySelfDefinedEvent() {
    *this = ::std::move(from);
  }

  inline TelemetrySelfDefinedEvent& operator=(const TelemetrySelfDefinedEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TelemetrySelfDefinedEvent& operator=(TelemetrySelfDefinedEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TelemetrySelfDefinedEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TelemetrySelfDefinedEvent* internal_default_instance() {
    return reinterpret_cast<const TelemetrySelfDefinedEvent*>(
               &_TelemetrySelfDefinedEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TelemetrySelfDefinedEvent& a, TelemetrySelfDefinedEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TelemetrySelfDefinedEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TelemetrySelfDefinedEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TelemetrySelfDefinedEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TelemetrySelfDefinedEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TelemetrySelfDefinedEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TelemetrySelfDefinedEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TelemetrySelfDefinedEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "huawei_telemetry.TelemetrySelfDefinedEvent";
  }
  protected:
  explicit TelemetrySelfDefinedEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TelemetrySelfDefinedEvent_ThresholdRelation ThresholdRelation;
  static constexpr ThresholdRelation ThresholdRelation_INVALID =
    TelemetrySelfDefinedEvent_ThresholdRelation_ThresholdRelation_INVALID;
  static constexpr ThresholdRelation ThresholdRelation_AND =
    TelemetrySelfDefinedEvent_ThresholdRelation_ThresholdRelation_AND;
  static constexpr ThresholdRelation ThresholdRelation_OR =
    TelemetrySelfDefinedEvent_ThresholdRelation_ThresholdRelation_OR;
  static inline bool ThresholdRelation_IsValid(int value) {
    return TelemetrySelfDefinedEvent_ThresholdRelation_IsValid(value);
  }
  static constexpr ThresholdRelation ThresholdRelation_MIN =
    TelemetrySelfDefinedEvent_ThresholdRelation_ThresholdRelation_MIN;
  static constexpr ThresholdRelation ThresholdRelation_MAX =
    TelemetrySelfDefinedEvent_ThresholdRelation_ThresholdRelation_MAX;
  static constexpr int ThresholdRelation_ARRAYSIZE =
    TelemetrySelfDefinedEvent_ThresholdRelation_ThresholdRelation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ThresholdRelation_descriptor() {
    return TelemetrySelfDefinedEvent_ThresholdRelation_descriptor();
  }
  template<typename T>
  static inline const std::string& ThresholdRelation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ThresholdRelation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ThresholdRelation_Name.");
    return TelemetrySelfDefinedEvent_ThresholdRelation_Name(enum_t_value);
  }
  static inline bool ThresholdRelation_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ThresholdRelation* value) {
    return TelemetrySelfDefinedEvent_ThresholdRelation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kDescriptionFieldNumber = 3,
    kFieldNameFieldNumber = 4,
    kContentFieldNumber = 8,
    kProtoPathFieldNumber = 13,
    kDataThresholdFieldNumber = 6,
    kLevelFieldNumber = 2,
    kFieldValueFieldNumber = 5,
    kThresholdRelationFieldNumber = 7,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string fieldName = 4;
  void clear_fieldname();
  const std::string& fieldname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fieldname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fieldname();
  PROTOBUF_NODISCARD std::string* release_fieldname();
  void set_allocated_fieldname(std::string* fieldname);
  private:
  const std::string& _internal_fieldname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fieldname(const std::string& value);
  std::string* _internal_mutable_fieldname();
  public:

  // bytes content = 8;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string proto_path = 13;
  void clear_proto_path();
  const std::string& proto_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proto_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proto_path();
  PROTOBUF_NODISCARD std::string* release_proto_path();
  void set_allocated_proto_path(std::string* proto_path);
  private:
  const std::string& _internal_proto_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proto_path(const std::string& value);
  std::string* _internal_mutable_proto_path();
  public:

  // .huawei_telemetry.TelemetrySelfDefineThresTable data_threshold = 6;
  bool has_data_threshold() const;
  private:
  bool _internal_has_data_threshold() const;
  public:
  void clear_data_threshold();
  const ::huawei_telemetry::TelemetrySelfDefineThresTable& data_threshold() const;
  PROTOBUF_NODISCARD ::huawei_telemetry::TelemetrySelfDefineThresTable* release_data_threshold();
  ::huawei_telemetry::TelemetrySelfDefineThresTable* mutable_data_threshold();
  void set_allocated_data_threshold(::huawei_telemetry::TelemetrySelfDefineThresTable* data_threshold);
  private:
  const ::huawei_telemetry::TelemetrySelfDefineThresTable& _internal_data_threshold() const;
  ::huawei_telemetry::TelemetrySelfDefineThresTable* _internal_mutable_data_threshold();
  public:
  void unsafe_arena_set_allocated_data_threshold(
      ::huawei_telemetry::TelemetrySelfDefineThresTable* data_threshold);
  ::huawei_telemetry::TelemetrySelfDefineThresTable* unsafe_arena_release_data_threshold();

  // uint32 level = 2;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint32 fieldValue = 5;
  void clear_fieldvalue();
  uint32_t fieldvalue() const;
  void set_fieldvalue(uint32_t value);
  private:
  uint32_t _internal_fieldvalue() const;
  void _internal_set_fieldvalue(uint32_t value);
  public:

  // .huawei_telemetry.TelemetrySelfDefinedEvent.ThresholdRelation thresholdRelation = 7;
  void clear_thresholdrelation();
  ::huawei_telemetry::TelemetrySelfDefinedEvent_ThresholdRelation thresholdrelation() const;
  void set_thresholdrelation(::huawei_telemetry::TelemetrySelfDefinedEvent_ThresholdRelation value);
  private:
  ::huawei_telemetry::TelemetrySelfDefinedEvent_ThresholdRelation _internal_thresholdrelation() const;
  void _internal_set_thresholdrelation(::huawei_telemetry::TelemetrySelfDefinedEvent_ThresholdRelation value);
  public:

  // @@protoc_insertion_point(class_scope:huawei_telemetry.TelemetrySelfDefinedEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fieldname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_path_;
  ::huawei_telemetry::TelemetrySelfDefineThresTable* data_threshold_;
  uint32_t level_;
  uint32_t fieldvalue_;
  int thresholdrelation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_huawei_5ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class TelemetrySelfDefineThresTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:huawei_telemetry.TelemetrySelfDefineThresTable) */ {
 public:
  inline TelemetrySelfDefineThresTable() : TelemetrySelfDefineThresTable(nullptr) {}
  ~TelemetrySelfDefineThresTable() override;
  explicit constexpr TelemetrySelfDefineThresTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TelemetrySelfDefineThresTable(const TelemetrySelfDefineThresTable& from);
  TelemetrySelfDefineThresTable(TelemetrySelfDefineThresTable&& from) noexcept
    : TelemetrySelfDefineThresTable() {
    *this = ::std::move(from);
  }

  inline TelemetrySelfDefineThresTable& operator=(const TelemetrySelfDefineThresTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TelemetrySelfDefineThresTable& operator=(TelemetrySelfDefineThresTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TelemetrySelfDefineThresTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const TelemetrySelfDefineThresTable* internal_default_instance() {
    return reinterpret_cast<const TelemetrySelfDefineThresTable*>(
               &_TelemetrySelfDefineThresTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TelemetrySelfDefineThresTable& a, TelemetrySelfDefineThresTable& b) {
    a.Swap(&b);
  }
  inline void Swap(TelemetrySelfDefineThresTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TelemetrySelfDefineThresTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TelemetrySelfDefineThresTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TelemetrySelfDefineThresTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TelemetrySelfDefineThresTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TelemetrySelfDefineThresTable& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TelemetrySelfDefineThresTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "huawei_telemetry.TelemetrySelfDefineThresTable";
  }
  protected:
  explicit TelemetrySelfDefineThresTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowFieldNumber = 1,
  };
  // repeated .huawei_telemetry.TelemetryThreshold row = 1;
  int row_size() const;
  private:
  int _internal_row_size() const;
  public:
  void clear_row();
  ::huawei_telemetry::TelemetryThreshold* mutable_row(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::huawei_telemetry::TelemetryThreshold >*
      mutable_row();
  private:
  const ::huawei_telemetry::TelemetryThreshold& _internal_row(int index) const;
  ::huawei_telemetry::TelemetryThreshold* _internal_add_row();
  public:
  const ::huawei_telemetry::TelemetryThreshold& row(int index) const;
  ::huawei_telemetry::TelemetryThreshold* add_row();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::huawei_telemetry::TelemetryThreshold >&
      row() const;

  // @@protoc_insertion_point(class_scope:huawei_telemetry.TelemetrySelfDefineThresTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::huawei_telemetry::TelemetryThreshold > row_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_huawei_5ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class TelemetryThreshold final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:huawei_telemetry.TelemetryThreshold) */ {
 public:
  inline TelemetryThreshold() : TelemetryThreshold(nullptr) {}
  ~TelemetryThreshold() override;
  explicit constexpr TelemetryThreshold(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TelemetryThreshold(const TelemetryThreshold& from);
  TelemetryThreshold(TelemetryThreshold&& from) noexcept
    : TelemetryThreshold() {
    *this = ::std::move(from);
  }

  inline TelemetryThreshold& operator=(const TelemetryThreshold& from) {
    CopyFrom(from);
    return *this;
  }
  inline TelemetryThreshold& operator=(TelemetryThreshold&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TelemetryThreshold& default_instance() {
    return *internal_default_instance();
  }
  static inline const TelemetryThreshold* internal_default_instance() {
    return reinterpret_cast<const TelemetryThreshold*>(
               &_TelemetryThreshold_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TelemetryThreshold& a, TelemetryThreshold& b) {
    a.Swap(&b);
  }
  inline void Swap(TelemetryThreshold* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TelemetryThreshold* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TelemetryThreshold* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TelemetryThreshold>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TelemetryThreshold& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TelemetryThreshold& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TelemetryThreshold* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "huawei_telemetry.TelemetryThreshold";
  }
  protected:
  explicit TelemetryThreshold(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TelemetryThreshold_ThresholdOpType ThresholdOpType;
  static constexpr ThresholdOpType ThresholdOpType_EQ =
    TelemetryThreshold_ThresholdOpType_ThresholdOpType_EQ;
  static constexpr ThresholdOpType ThresholdOpType_GT =
    TelemetryThreshold_ThresholdOpType_ThresholdOpType_GT;
  static constexpr ThresholdOpType ThresholdOpType_GE =
    TelemetryThreshold_ThresholdOpType_ThresholdOpType_GE;
  static constexpr ThresholdOpType ThresholdOpType_LT =
    TelemetryThreshold_ThresholdOpType_ThresholdOpType_LT;
  static constexpr ThresholdOpType ThresholdOpType_LE =
    TelemetryThreshold_ThresholdOpType_ThresholdOpType_LE;
  static inline bool ThresholdOpType_IsValid(int value) {
    return TelemetryThreshold_ThresholdOpType_IsValid(value);
  }
  static constexpr ThresholdOpType ThresholdOpType_MIN =
    TelemetryThreshold_ThresholdOpType_ThresholdOpType_MIN;
  static constexpr ThresholdOpType ThresholdOpType_MAX =
    TelemetryThreshold_ThresholdOpType_ThresholdOpType_MAX;
  static constexpr int ThresholdOpType_ARRAYSIZE =
    TelemetryThreshold_ThresholdOpType_ThresholdOpType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ThresholdOpType_descriptor() {
    return TelemetryThreshold_ThresholdOpType_descriptor();
  }
  template<typename T>
  static inline const std::string& ThresholdOpType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ThresholdOpType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ThresholdOpType_Name.");
    return TelemetryThreshold_ThresholdOpType_Name(enum_t_value);
  }
  static inline bool ThresholdOpType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ThresholdOpType* value) {
    return TelemetryThreshold_ThresholdOpType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kThresholdValueFieldNumber = 1,
    kThresholdOpTypeFieldNumber = 2,
  };
  // uint32 thresholdValue = 1;
  void clear_thresholdvalue();
  uint32_t thresholdvalue() const;
  void set_thresholdvalue(uint32_t value);
  private:
  uint32_t _internal_thresholdvalue() const;
  void _internal_set_thresholdvalue(uint32_t value);
  public:

  // .huawei_telemetry.TelemetryThreshold.ThresholdOpType thresholdOpType = 2;
  void clear_thresholdoptype();
  ::huawei_telemetry::TelemetryThreshold_ThresholdOpType thresholdoptype() const;
  void set_thresholdoptype(::huawei_telemetry::TelemetryThreshold_ThresholdOpType value);
  private:
  ::huawei_telemetry::TelemetryThreshold_ThresholdOpType _internal_thresholdoptype() const;
  void _internal_set_thresholdoptype(::huawei_telemetry::TelemetryThreshold_ThresholdOpType value);
  public:

  // @@protoc_insertion_point(class_scope:huawei_telemetry.TelemetryThreshold)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t thresholdvalue_;
  int thresholdoptype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_huawei_5ftelemetry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Telemetry

// string node_id_str = 1;
inline void Telemetry::clear_node_id_str() {
  node_id_str_.ClearToEmpty();
}
inline const std::string& Telemetry::node_id_str() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.Telemetry.node_id_str)
  return _internal_node_id_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Telemetry::set_node_id_str(ArgT0&& arg0, ArgT... args) {
 
 node_id_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:huawei_telemetry.Telemetry.node_id_str)
}
inline std::string* Telemetry::mutable_node_id_str() {
  std::string* _s = _internal_mutable_node_id_str();
  // @@protoc_insertion_point(field_mutable:huawei_telemetry.Telemetry.node_id_str)
  return _s;
}
inline const std::string& Telemetry::_internal_node_id_str() const {
  return node_id_str_.Get();
}
inline void Telemetry::_internal_set_node_id_str(const std::string& value) {
  
  node_id_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Telemetry::_internal_mutable_node_id_str() {
  
  return node_id_str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Telemetry::release_node_id_str() {
  // @@protoc_insertion_point(field_release:huawei_telemetry.Telemetry.node_id_str)
  return node_id_str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Telemetry::set_allocated_node_id_str(std::string* node_id_str) {
  if (node_id_str != nullptr) {
    
  } else {
    
  }
  node_id_str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id_str,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (node_id_str_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    node_id_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:huawei_telemetry.Telemetry.node_id_str)
}

// string subscription_id_str = 2;
inline void Telemetry::clear_subscription_id_str() {
  subscription_id_str_.ClearToEmpty();
}
inline const std::string& Telemetry::subscription_id_str() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.Telemetry.subscription_id_str)
  return _internal_subscription_id_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Telemetry::set_subscription_id_str(ArgT0&& arg0, ArgT... args) {
 
 subscription_id_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:huawei_telemetry.Telemetry.subscription_id_str)
}
inline std::string* Telemetry::mutable_subscription_id_str() {
  std::string* _s = _internal_mutable_subscription_id_str();
  // @@protoc_insertion_point(field_mutable:huawei_telemetry.Telemetry.subscription_id_str)
  return _s;
}
inline const std::string& Telemetry::_internal_subscription_id_str() const {
  return subscription_id_str_.Get();
}
inline void Telemetry::_internal_set_subscription_id_str(const std::string& value) {
  
  subscription_id_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Telemetry::_internal_mutable_subscription_id_str() {
  
  return subscription_id_str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Telemetry::release_subscription_id_str() {
  // @@protoc_insertion_point(field_release:huawei_telemetry.Telemetry.subscription_id_str)
  return subscription_id_str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Telemetry::set_allocated_subscription_id_str(std::string* subscription_id_str) {
  if (subscription_id_str != nullptr) {
    
  } else {
    
  }
  subscription_id_str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subscription_id_str,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (subscription_id_str_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    subscription_id_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:huawei_telemetry.Telemetry.subscription_id_str)
}

// string sensor_path = 3;
inline void Telemetry::clear_sensor_path() {
  sensor_path_.ClearToEmpty();
}
inline const std::string& Telemetry::sensor_path() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.Telemetry.sensor_path)
  return _internal_sensor_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Telemetry::set_sensor_path(ArgT0&& arg0, ArgT... args) {
 
 sensor_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:huawei_telemetry.Telemetry.sensor_path)
}
inline std::string* Telemetry::mutable_sensor_path() {
  std::string* _s = _internal_mutable_sensor_path();
  // @@protoc_insertion_point(field_mutable:huawei_telemetry.Telemetry.sensor_path)
  return _s;
}
inline const std::string& Telemetry::_internal_sensor_path() const {
  return sensor_path_.Get();
}
inline void Telemetry::_internal_set_sensor_path(const std::string& value) {
  
  sensor_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Telemetry::_internal_mutable_sensor_path() {
  
  return sensor_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Telemetry::release_sensor_path() {
  // @@protoc_insertion_point(field_release:huawei_telemetry.Telemetry.sensor_path)
  return sensor_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Telemetry::set_allocated_sensor_path(std::string* sensor_path) {
  if (sensor_path != nullptr) {
    
  } else {
    
  }
  sensor_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sensor_path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sensor_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sensor_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:huawei_telemetry.Telemetry.sensor_path)
}

// string proto_path = 13;
inline void Telemetry::clear_proto_path() {
  proto_path_.ClearToEmpty();
}
inline const std::string& Telemetry::proto_path() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.Telemetry.proto_path)
  return _internal_proto_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Telemetry::set_proto_path(ArgT0&& arg0, ArgT... args) {
 
 proto_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:huawei_telemetry.Telemetry.proto_path)
}
inline std::string* Telemetry::mutable_proto_path() {
  std::string* _s = _internal_mutable_proto_path();
  // @@protoc_insertion_point(field_mutable:huawei_telemetry.Telemetry.proto_path)
  return _s;
}
inline const std::string& Telemetry::_internal_proto_path() const {
  return proto_path_.Get();
}
inline void Telemetry::_internal_set_proto_path(const std::string& value) {
  
  proto_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Telemetry::_internal_mutable_proto_path() {
  
  return proto_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Telemetry::release_proto_path() {
  // @@protoc_insertion_point(field_release:huawei_telemetry.Telemetry.proto_path)
  return proto_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Telemetry::set_allocated_proto_path(std::string* proto_path) {
  if (proto_path != nullptr) {
    
  } else {
    
  }
  proto_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proto_path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (proto_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    proto_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:huawei_telemetry.Telemetry.proto_path)
}

// uint64 collection_id = 4;
inline void Telemetry::clear_collection_id() {
  collection_id_ = uint64_t{0u};
}
inline uint64_t Telemetry::_internal_collection_id() const {
  return collection_id_;
}
inline uint64_t Telemetry::collection_id() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.Telemetry.collection_id)
  return _internal_collection_id();
}
inline void Telemetry::_internal_set_collection_id(uint64_t value) {
  
  collection_id_ = value;
}
inline void Telemetry::set_collection_id(uint64_t value) {
  _internal_set_collection_id(value);
  // @@protoc_insertion_point(field_set:huawei_telemetry.Telemetry.collection_id)
}

// uint64 collection_start_time = 5;
inline void Telemetry::clear_collection_start_time() {
  collection_start_time_ = uint64_t{0u};
}
inline uint64_t Telemetry::_internal_collection_start_time() const {
  return collection_start_time_;
}
inline uint64_t Telemetry::collection_start_time() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.Telemetry.collection_start_time)
  return _internal_collection_start_time();
}
inline void Telemetry::_internal_set_collection_start_time(uint64_t value) {
  
  collection_start_time_ = value;
}
inline void Telemetry::set_collection_start_time(uint64_t value) {
  _internal_set_collection_start_time(value);
  // @@protoc_insertion_point(field_set:huawei_telemetry.Telemetry.collection_start_time)
}

// uint64 msg_timestamp = 6;
inline void Telemetry::clear_msg_timestamp() {
  msg_timestamp_ = uint64_t{0u};
}
inline uint64_t Telemetry::_internal_msg_timestamp() const {
  return msg_timestamp_;
}
inline uint64_t Telemetry::msg_timestamp() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.Telemetry.msg_timestamp)
  return _internal_msg_timestamp();
}
inline void Telemetry::_internal_set_msg_timestamp(uint64_t value) {
  
  msg_timestamp_ = value;
}
inline void Telemetry::set_msg_timestamp(uint64_t value) {
  _internal_set_msg_timestamp(value);
  // @@protoc_insertion_point(field_set:huawei_telemetry.Telemetry.msg_timestamp)
}

// .huawei_telemetry.TelemetryGPBTable data_gpb = 7;
inline bool Telemetry::_internal_has_data_gpb() const {
  return this != internal_default_instance() && data_gpb_ != nullptr;
}
inline bool Telemetry::has_data_gpb() const {
  return _internal_has_data_gpb();
}
inline void Telemetry::clear_data_gpb() {
  if (GetArenaForAllocation() == nullptr && data_gpb_ != nullptr) {
    delete data_gpb_;
  }
  data_gpb_ = nullptr;
}
inline const ::huawei_telemetry::TelemetryGPBTable& Telemetry::_internal_data_gpb() const {
  const ::huawei_telemetry::TelemetryGPBTable* p = data_gpb_;
  return p != nullptr ? *p : reinterpret_cast<const ::huawei_telemetry::TelemetryGPBTable&>(
      ::huawei_telemetry::_TelemetryGPBTable_default_instance_);
}
inline const ::huawei_telemetry::TelemetryGPBTable& Telemetry::data_gpb() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.Telemetry.data_gpb)
  return _internal_data_gpb();
}
inline void Telemetry::unsafe_arena_set_allocated_data_gpb(
    ::huawei_telemetry::TelemetryGPBTable* data_gpb) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_gpb_);
  }
  data_gpb_ = data_gpb;
  if (data_gpb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:huawei_telemetry.Telemetry.data_gpb)
}
inline ::huawei_telemetry::TelemetryGPBTable* Telemetry::release_data_gpb() {
  
  ::huawei_telemetry::TelemetryGPBTable* temp = data_gpb_;
  data_gpb_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::huawei_telemetry::TelemetryGPBTable* Telemetry::unsafe_arena_release_data_gpb() {
  // @@protoc_insertion_point(field_release:huawei_telemetry.Telemetry.data_gpb)
  
  ::huawei_telemetry::TelemetryGPBTable* temp = data_gpb_;
  data_gpb_ = nullptr;
  return temp;
}
inline ::huawei_telemetry::TelemetryGPBTable* Telemetry::_internal_mutable_data_gpb() {
  
  if (data_gpb_ == nullptr) {
    auto* p = CreateMaybeMessage<::huawei_telemetry::TelemetryGPBTable>(GetArenaForAllocation());
    data_gpb_ = p;
  }
  return data_gpb_;
}
inline ::huawei_telemetry::TelemetryGPBTable* Telemetry::mutable_data_gpb() {
  ::huawei_telemetry::TelemetryGPBTable* _msg = _internal_mutable_data_gpb();
  // @@protoc_insertion_point(field_mutable:huawei_telemetry.Telemetry.data_gpb)
  return _msg;
}
inline void Telemetry::set_allocated_data_gpb(::huawei_telemetry::TelemetryGPBTable* data_gpb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_gpb_;
  }
  if (data_gpb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::huawei_telemetry::TelemetryGPBTable>::GetOwningArena(data_gpb);
    if (message_arena != submessage_arena) {
      data_gpb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_gpb, submessage_arena);
    }
    
  } else {
    
  }
  data_gpb_ = data_gpb;
  // @@protoc_insertion_point(field_set_allocated:huawei_telemetry.Telemetry.data_gpb)
}

// uint64 collection_end_time = 8;
inline void Telemetry::clear_collection_end_time() {
  collection_end_time_ = uint64_t{0u};
}
inline uint64_t Telemetry::_internal_collection_end_time() const {
  return collection_end_time_;
}
inline uint64_t Telemetry::collection_end_time() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.Telemetry.collection_end_time)
  return _internal_collection_end_time();
}
inline void Telemetry::_internal_set_collection_end_time(uint64_t value) {
  
  collection_end_time_ = value;
}
inline void Telemetry::set_collection_end_time(uint64_t value) {
  _internal_set_collection_end_time(value);
  // @@protoc_insertion_point(field_set:huawei_telemetry.Telemetry.collection_end_time)
}

// uint32 current_period = 9;
inline void Telemetry::clear_current_period() {
  current_period_ = 0u;
}
inline uint32_t Telemetry::_internal_current_period() const {
  return current_period_;
}
inline uint32_t Telemetry::current_period() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.Telemetry.current_period)
  return _internal_current_period();
}
inline void Telemetry::_internal_set_current_period(uint32_t value) {
  
  current_period_ = value;
}
inline void Telemetry::set_current_period(uint32_t value) {
  _internal_set_current_period(value);
  // @@protoc_insertion_point(field_set:huawei_telemetry.Telemetry.current_period)
}

// string except_desc = 10;
inline void Telemetry::clear_except_desc() {
  except_desc_.ClearToEmpty();
}
inline const std::string& Telemetry::except_desc() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.Telemetry.except_desc)
  return _internal_except_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Telemetry::set_except_desc(ArgT0&& arg0, ArgT... args) {
 
 except_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:huawei_telemetry.Telemetry.except_desc)
}
inline std::string* Telemetry::mutable_except_desc() {
  std::string* _s = _internal_mutable_except_desc();
  // @@protoc_insertion_point(field_mutable:huawei_telemetry.Telemetry.except_desc)
  return _s;
}
inline const std::string& Telemetry::_internal_except_desc() const {
  return except_desc_.Get();
}
inline void Telemetry::_internal_set_except_desc(const std::string& value) {
  
  except_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Telemetry::_internal_mutable_except_desc() {
  
  return except_desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Telemetry::release_except_desc() {
  // @@protoc_insertion_point(field_release:huawei_telemetry.Telemetry.except_desc)
  return except_desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Telemetry::set_allocated_except_desc(std::string* except_desc) {
  if (except_desc != nullptr) {
    
  } else {
    
  }
  except_desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), except_desc,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (except_desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    except_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:huawei_telemetry.Telemetry.except_desc)
}

// string product_name = 11;
inline void Telemetry::clear_product_name() {
  product_name_.ClearToEmpty();
}
inline const std::string& Telemetry::product_name() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.Telemetry.product_name)
  return _internal_product_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Telemetry::set_product_name(ArgT0&& arg0, ArgT... args) {
 
 product_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:huawei_telemetry.Telemetry.product_name)
}
inline std::string* Telemetry::mutable_product_name() {
  std::string* _s = _internal_mutable_product_name();
  // @@protoc_insertion_point(field_mutable:huawei_telemetry.Telemetry.product_name)
  return _s;
}
inline const std::string& Telemetry::_internal_product_name() const {
  return product_name_.Get();
}
inline void Telemetry::_internal_set_product_name(const std::string& value) {
  
  product_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Telemetry::_internal_mutable_product_name() {
  
  return product_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Telemetry::release_product_name() {
  // @@protoc_insertion_point(field_release:huawei_telemetry.Telemetry.product_name)
  return product_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Telemetry::set_allocated_product_name(std::string* product_name) {
  if (product_name != nullptr) {
    
  } else {
    
  }
  product_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (product_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    product_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:huawei_telemetry.Telemetry.product_name)
}

// .huawei_telemetry.Telemetry.Encoding encoding = 12;
inline void Telemetry::clear_encoding() {
  encoding_ = 0;
}
inline ::huawei_telemetry::Telemetry_Encoding Telemetry::_internal_encoding() const {
  return static_cast< ::huawei_telemetry::Telemetry_Encoding >(encoding_);
}
inline ::huawei_telemetry::Telemetry_Encoding Telemetry::encoding() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.Telemetry.encoding)
  return _internal_encoding();
}
inline void Telemetry::_internal_set_encoding(::huawei_telemetry::Telemetry_Encoding value) {
  
  encoding_ = value;
}
inline void Telemetry::set_encoding(::huawei_telemetry::Telemetry_Encoding value) {
  _internal_set_encoding(value);
  // @@protoc_insertion_point(field_set:huawei_telemetry.Telemetry.encoding)
}

// string data_str = 14;
inline void Telemetry::clear_data_str() {
  data_str_.ClearToEmpty();
}
inline const std::string& Telemetry::data_str() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.Telemetry.data_str)
  return _internal_data_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Telemetry::set_data_str(ArgT0&& arg0, ArgT... args) {
 
 data_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:huawei_telemetry.Telemetry.data_str)
}
inline std::string* Telemetry::mutable_data_str() {
  std::string* _s = _internal_mutable_data_str();
  // @@protoc_insertion_point(field_mutable:huawei_telemetry.Telemetry.data_str)
  return _s;
}
inline const std::string& Telemetry::_internal_data_str() const {
  return data_str_.Get();
}
inline void Telemetry::_internal_set_data_str(const std::string& value) {
  
  data_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Telemetry::_internal_mutable_data_str() {
  
  return data_str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Telemetry::release_data_str() {
  // @@protoc_insertion_point(field_release:huawei_telemetry.Telemetry.data_str)
  return data_str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Telemetry::set_allocated_data_str(std::string* data_str) {
  if (data_str != nullptr) {
    
  } else {
    
  }
  data_str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_str,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_str_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:huawei_telemetry.Telemetry.data_str)
}

// string ne_id = 15;
inline void Telemetry::clear_ne_id() {
  ne_id_.ClearToEmpty();
}
inline const std::string& Telemetry::ne_id() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.Telemetry.ne_id)
  return _internal_ne_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Telemetry::set_ne_id(ArgT0&& arg0, ArgT... args) {
 
 ne_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:huawei_telemetry.Telemetry.ne_id)
}
inline std::string* Telemetry::mutable_ne_id() {
  std::string* _s = _internal_mutable_ne_id();
  // @@protoc_insertion_point(field_mutable:huawei_telemetry.Telemetry.ne_id)
  return _s;
}
inline const std::string& Telemetry::_internal_ne_id() const {
  return ne_id_.Get();
}
inline void Telemetry::_internal_set_ne_id(const std::string& value) {
  
  ne_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Telemetry::_internal_mutable_ne_id() {
  
  return ne_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Telemetry::release_ne_id() {
  // @@protoc_insertion_point(field_release:huawei_telemetry.Telemetry.ne_id)
  return ne_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Telemetry::set_allocated_ne_id(std::string* ne_id) {
  if (ne_id != nullptr) {
    
  } else {
    
  }
  ne_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ne_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ne_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ne_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:huawei_telemetry.Telemetry.ne_id)
}

// string software_version = 16;
inline void Telemetry::clear_software_version() {
  software_version_.ClearToEmpty();
}
inline const std::string& Telemetry::software_version() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.Telemetry.software_version)
  return _internal_software_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Telemetry::set_software_version(ArgT0&& arg0, ArgT... args) {
 
 software_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:huawei_telemetry.Telemetry.software_version)
}
inline std::string* Telemetry::mutable_software_version() {
  std::string* _s = _internal_mutable_software_version();
  // @@protoc_insertion_point(field_mutable:huawei_telemetry.Telemetry.software_version)
  return _s;
}
inline const std::string& Telemetry::_internal_software_version() const {
  return software_version_.Get();
}
inline void Telemetry::_internal_set_software_version(const std::string& value) {
  
  software_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Telemetry::_internal_mutable_software_version() {
  
  return software_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Telemetry::release_software_version() {
  // @@protoc_insertion_point(field_release:huawei_telemetry.Telemetry.software_version)
  return software_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Telemetry::set_allocated_software_version(std::string* software_version) {
  if (software_version != nullptr) {
    
  } else {
    
  }
  software_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), software_version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (software_version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    software_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:huawei_telemetry.Telemetry.software_version)
}

// -------------------------------------------------------------------

// TelemetryGPBTable

// repeated .huawei_telemetry.TelemetryRowGPB row = 1;
inline int TelemetryGPBTable::_internal_row_size() const {
  return row_.size();
}
inline int TelemetryGPBTable::row_size() const {
  return _internal_row_size();
}
inline void TelemetryGPBTable::clear_row() {
  row_.Clear();
}
inline ::huawei_telemetry::TelemetryRowGPB* TelemetryGPBTable::mutable_row(int index) {
  // @@protoc_insertion_point(field_mutable:huawei_telemetry.TelemetryGPBTable.row)
  return row_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::huawei_telemetry::TelemetryRowGPB >*
TelemetryGPBTable::mutable_row() {
  // @@protoc_insertion_point(field_mutable_list:huawei_telemetry.TelemetryGPBTable.row)
  return &row_;
}
inline const ::huawei_telemetry::TelemetryRowGPB& TelemetryGPBTable::_internal_row(int index) const {
  return row_.Get(index);
}
inline const ::huawei_telemetry::TelemetryRowGPB& TelemetryGPBTable::row(int index) const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.TelemetryGPBTable.row)
  return _internal_row(index);
}
inline ::huawei_telemetry::TelemetryRowGPB* TelemetryGPBTable::_internal_add_row() {
  return row_.Add();
}
inline ::huawei_telemetry::TelemetryRowGPB* TelemetryGPBTable::add_row() {
  ::huawei_telemetry::TelemetryRowGPB* _add = _internal_add_row();
  // @@protoc_insertion_point(field_add:huawei_telemetry.TelemetryGPBTable.row)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::huawei_telemetry::TelemetryRowGPB >&
TelemetryGPBTable::row() const {
  // @@protoc_insertion_point(field_list:huawei_telemetry.TelemetryGPBTable.row)
  return row_;
}

// repeated .huawei_telemetry.DataPath delete = 2;
inline int TelemetryGPBTable::_internal_delete__size() const {
  return delete__.size();
}
inline int TelemetryGPBTable::delete__size() const {
  return _internal_delete__size();
}
inline void TelemetryGPBTable::clear_delete_() {
  delete__.Clear();
}
inline ::huawei_telemetry::DataPath* TelemetryGPBTable::mutable_delete_(int index) {
  // @@protoc_insertion_point(field_mutable:huawei_telemetry.TelemetryGPBTable.delete)
  return delete__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::huawei_telemetry::DataPath >*
TelemetryGPBTable::mutable_delete_() {
  // @@protoc_insertion_point(field_mutable_list:huawei_telemetry.TelemetryGPBTable.delete)
  return &delete__;
}
inline const ::huawei_telemetry::DataPath& TelemetryGPBTable::_internal_delete_(int index) const {
  return delete__.Get(index);
}
inline const ::huawei_telemetry::DataPath& TelemetryGPBTable::delete_(int index) const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.TelemetryGPBTable.delete)
  return _internal_delete_(index);
}
inline ::huawei_telemetry::DataPath* TelemetryGPBTable::_internal_add_delete_() {
  return delete__.Add();
}
inline ::huawei_telemetry::DataPath* TelemetryGPBTable::add_delete_() {
  ::huawei_telemetry::DataPath* _add = _internal_add_delete_();
  // @@protoc_insertion_point(field_add:huawei_telemetry.TelemetryGPBTable.delete)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::huawei_telemetry::DataPath >&
TelemetryGPBTable::delete_() const {
  // @@protoc_insertion_point(field_list:huawei_telemetry.TelemetryGPBTable.delete)
  return delete__;
}

// .huawei_telemetry.Generator generator = 3;
inline bool TelemetryGPBTable::_internal_has_generator() const {
  return this != internal_default_instance() && generator_ != nullptr;
}
inline bool TelemetryGPBTable::has_generator() const {
  return _internal_has_generator();
}
inline void TelemetryGPBTable::clear_generator() {
  if (GetArenaForAllocation() == nullptr && generator_ != nullptr) {
    delete generator_;
  }
  generator_ = nullptr;
}
inline const ::huawei_telemetry::Generator& TelemetryGPBTable::_internal_generator() const {
  const ::huawei_telemetry::Generator* p = generator_;
  return p != nullptr ? *p : reinterpret_cast<const ::huawei_telemetry::Generator&>(
      ::huawei_telemetry::_Generator_default_instance_);
}
inline const ::huawei_telemetry::Generator& TelemetryGPBTable::generator() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.TelemetryGPBTable.generator)
  return _internal_generator();
}
inline void TelemetryGPBTable::unsafe_arena_set_allocated_generator(
    ::huawei_telemetry::Generator* generator) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(generator_);
  }
  generator_ = generator;
  if (generator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:huawei_telemetry.TelemetryGPBTable.generator)
}
inline ::huawei_telemetry::Generator* TelemetryGPBTable::release_generator() {
  
  ::huawei_telemetry::Generator* temp = generator_;
  generator_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::huawei_telemetry::Generator* TelemetryGPBTable::unsafe_arena_release_generator() {
  // @@protoc_insertion_point(field_release:huawei_telemetry.TelemetryGPBTable.generator)
  
  ::huawei_telemetry::Generator* temp = generator_;
  generator_ = nullptr;
  return temp;
}
inline ::huawei_telemetry::Generator* TelemetryGPBTable::_internal_mutable_generator() {
  
  if (generator_ == nullptr) {
    auto* p = CreateMaybeMessage<::huawei_telemetry::Generator>(GetArenaForAllocation());
    generator_ = p;
  }
  return generator_;
}
inline ::huawei_telemetry::Generator* TelemetryGPBTable::mutable_generator() {
  ::huawei_telemetry::Generator* _msg = _internal_mutable_generator();
  // @@protoc_insertion_point(field_mutable:huawei_telemetry.TelemetryGPBTable.generator)
  return _msg;
}
inline void TelemetryGPBTable::set_allocated_generator(::huawei_telemetry::Generator* generator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete generator_;
  }
  if (generator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::huawei_telemetry::Generator>::GetOwningArena(generator);
    if (message_arena != submessage_arena) {
      generator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generator, submessage_arena);
    }
    
  } else {
    
  }
  generator_ = generator;
  // @@protoc_insertion_point(field_set_allocated:huawei_telemetry.TelemetryGPBTable.generator)
}

// -------------------------------------------------------------------

// Generator

// uint64 generator_id = 1;
inline void Generator::clear_generator_id() {
  generator_id_ = uint64_t{0u};
}
inline uint64_t Generator::_internal_generator_id() const {
  return generator_id_;
}
inline uint64_t Generator::generator_id() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.Generator.generator_id)
  return _internal_generator_id();
}
inline void Generator::_internal_set_generator_id(uint64_t value) {
  
  generator_id_ = value;
}
inline void Generator::set_generator_id(uint64_t value) {
  _internal_set_generator_id(value);
  // @@protoc_insertion_point(field_set:huawei_telemetry.Generator.generator_id)
}

// uint32 generator_sn = 2;
inline void Generator::clear_generator_sn() {
  generator_sn_ = 0u;
}
inline uint32_t Generator::_internal_generator_sn() const {
  return generator_sn_;
}
inline uint32_t Generator::generator_sn() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.Generator.generator_sn)
  return _internal_generator_sn();
}
inline void Generator::_internal_set_generator_sn(uint32_t value) {
  
  generator_sn_ = value;
}
inline void Generator::set_generator_sn(uint32_t value) {
  _internal_set_generator_sn(value);
  // @@protoc_insertion_point(field_set:huawei_telemetry.Generator.generator_sn)
}

// bool generator_sync = 3;
inline void Generator::clear_generator_sync() {
  generator_sync_ = false;
}
inline bool Generator::_internal_generator_sync() const {
  return generator_sync_;
}
inline bool Generator::generator_sync() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.Generator.generator_sync)
  return _internal_generator_sync();
}
inline void Generator::_internal_set_generator_sync(bool value) {
  
  generator_sync_ = value;
}
inline void Generator::set_generator_sync(bool value) {
  _internal_set_generator_sync(value);
  // @@protoc_insertion_point(field_set:huawei_telemetry.Generator.generator_sync)
}

// -------------------------------------------------------------------

// TelemetryRowGPB

// uint64 timestamp = 1;
inline void TelemetryRowGPB::clear_timestamp() {
  timestamp_ = uint64_t{0u};
}
inline uint64_t TelemetryRowGPB::_internal_timestamp() const {
  return timestamp_;
}
inline uint64_t TelemetryRowGPB::timestamp() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.TelemetryRowGPB.timestamp)
  return _internal_timestamp();
}
inline void TelemetryRowGPB::_internal_set_timestamp(uint64_t value) {
  
  timestamp_ = value;
}
inline void TelemetryRowGPB::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:huawei_telemetry.TelemetryRowGPB.timestamp)
}

// bytes content = 11;
inline void TelemetryRowGPB::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& TelemetryRowGPB::content() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.TelemetryRowGPB.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TelemetryRowGPB::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:huawei_telemetry.TelemetryRowGPB.content)
}
inline std::string* TelemetryRowGPB::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:huawei_telemetry.TelemetryRowGPB.content)
  return _s;
}
inline const std::string& TelemetryRowGPB::_internal_content() const {
  return content_.Get();
}
inline void TelemetryRowGPB::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TelemetryRowGPB::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TelemetryRowGPB::release_content() {
  // @@protoc_insertion_point(field_release:huawei_telemetry.TelemetryRowGPB.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TelemetryRowGPB::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:huawei_telemetry.TelemetryRowGPB.content)
}

// -------------------------------------------------------------------

// DataPath

// uint64 timestamp = 1;
inline void DataPath::clear_timestamp() {
  timestamp_ = uint64_t{0u};
}
inline uint64_t DataPath::_internal_timestamp() const {
  return timestamp_;
}
inline uint64_t DataPath::timestamp() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.DataPath.timestamp)
  return _internal_timestamp();
}
inline void DataPath::_internal_set_timestamp(uint64_t value) {
  
  timestamp_ = value;
}
inline void DataPath::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:huawei_telemetry.DataPath.timestamp)
}

// .huawei_telemetry.Path path = 2;
inline bool DataPath::_internal_has_path() const {
  return this != internal_default_instance() && path_ != nullptr;
}
inline bool DataPath::has_path() const {
  return _internal_has_path();
}
inline void DataPath::clear_path() {
  if (GetArenaForAllocation() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
}
inline const ::huawei_telemetry::Path& DataPath::_internal_path() const {
  const ::huawei_telemetry::Path* p = path_;
  return p != nullptr ? *p : reinterpret_cast<const ::huawei_telemetry::Path&>(
      ::huawei_telemetry::_Path_default_instance_);
}
inline const ::huawei_telemetry::Path& DataPath::path() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.DataPath.path)
  return _internal_path();
}
inline void DataPath::unsafe_arena_set_allocated_path(
    ::huawei_telemetry::Path* path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(path_);
  }
  path_ = path;
  if (path) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:huawei_telemetry.DataPath.path)
}
inline ::huawei_telemetry::Path* DataPath::release_path() {
  
  ::huawei_telemetry::Path* temp = path_;
  path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::huawei_telemetry::Path* DataPath::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_release:huawei_telemetry.DataPath.path)
  
  ::huawei_telemetry::Path* temp = path_;
  path_ = nullptr;
  return temp;
}
inline ::huawei_telemetry::Path* DataPath::_internal_mutable_path() {
  
  if (path_ == nullptr) {
    auto* p = CreateMaybeMessage<::huawei_telemetry::Path>(GetArenaForAllocation());
    path_ = p;
  }
  return path_;
}
inline ::huawei_telemetry::Path* DataPath::mutable_path() {
  ::huawei_telemetry::Path* _msg = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:huawei_telemetry.DataPath.path)
  return _msg;
}
inline void DataPath::set_allocated_path(::huawei_telemetry::Path* path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete path_;
  }
  if (path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::huawei_telemetry::Path>::GetOwningArena(path);
    if (message_arena != submessage_arena) {
      path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    
  } else {
    
  }
  path_ = path;
  // @@protoc_insertion_point(field_set_allocated:huawei_telemetry.DataPath.path)
}

// -------------------------------------------------------------------

// Path

// repeated .huawei_telemetry.PathElem node = 1;
inline int Path::_internal_node_size() const {
  return node_.size();
}
inline int Path::node_size() const {
  return _internal_node_size();
}
inline void Path::clear_node() {
  node_.Clear();
}
inline ::huawei_telemetry::PathElem* Path::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:huawei_telemetry.Path.node)
  return node_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::huawei_telemetry::PathElem >*
Path::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:huawei_telemetry.Path.node)
  return &node_;
}
inline const ::huawei_telemetry::PathElem& Path::_internal_node(int index) const {
  return node_.Get(index);
}
inline const ::huawei_telemetry::PathElem& Path::node(int index) const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.Path.node)
  return _internal_node(index);
}
inline ::huawei_telemetry::PathElem* Path::_internal_add_node() {
  return node_.Add();
}
inline ::huawei_telemetry::PathElem* Path::add_node() {
  ::huawei_telemetry::PathElem* _add = _internal_add_node();
  // @@protoc_insertion_point(field_add:huawei_telemetry.Path.node)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::huawei_telemetry::PathElem >&
Path::node() const {
  // @@protoc_insertion_point(field_list:huawei_telemetry.Path.node)
  return node_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PathElem

// string name = 1;
inline void PathElem::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& PathElem::name() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.PathElem.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PathElem::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:huawei_telemetry.PathElem.name)
}
inline std::string* PathElem::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:huawei_telemetry.PathElem.name)
  return _s;
}
inline const std::string& PathElem::_internal_name() const {
  return name_.Get();
}
inline void PathElem::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PathElem::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PathElem::release_name() {
  // @@protoc_insertion_point(field_release:huawei_telemetry.PathElem.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PathElem::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:huawei_telemetry.PathElem.name)
}

// map<string, string> key = 2;
inline int PathElem::_internal_key_size() const {
  return key_.size();
}
inline int PathElem::key_size() const {
  return _internal_key_size();
}
inline void PathElem::clear_key() {
  key_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PathElem::_internal_key() const {
  return key_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PathElem::key() const {
  // @@protoc_insertion_point(field_map:huawei_telemetry.PathElem.key)
  return _internal_key();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PathElem::_internal_mutable_key() {
  return key_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PathElem::mutable_key() {
  // @@protoc_insertion_point(field_mutable_map:huawei_telemetry.PathElem.key)
  return _internal_mutable_key();
}

// -------------------------------------------------------------------

// TelemetrySelfDefinedEvent

// string path = 1;
inline void TelemetrySelfDefinedEvent::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& TelemetrySelfDefinedEvent::path() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.TelemetrySelfDefinedEvent.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TelemetrySelfDefinedEvent::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:huawei_telemetry.TelemetrySelfDefinedEvent.path)
}
inline std::string* TelemetrySelfDefinedEvent::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:huawei_telemetry.TelemetrySelfDefinedEvent.path)
  return _s;
}
inline const std::string& TelemetrySelfDefinedEvent::_internal_path() const {
  return path_.Get();
}
inline void TelemetrySelfDefinedEvent::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TelemetrySelfDefinedEvent::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TelemetrySelfDefinedEvent::release_path() {
  // @@protoc_insertion_point(field_release:huawei_telemetry.TelemetrySelfDefinedEvent.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TelemetrySelfDefinedEvent::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:huawei_telemetry.TelemetrySelfDefinedEvent.path)
}

// string proto_path = 13;
inline void TelemetrySelfDefinedEvent::clear_proto_path() {
  proto_path_.ClearToEmpty();
}
inline const std::string& TelemetrySelfDefinedEvent::proto_path() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.TelemetrySelfDefinedEvent.proto_path)
  return _internal_proto_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TelemetrySelfDefinedEvent::set_proto_path(ArgT0&& arg0, ArgT... args) {
 
 proto_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:huawei_telemetry.TelemetrySelfDefinedEvent.proto_path)
}
inline std::string* TelemetrySelfDefinedEvent::mutable_proto_path() {
  std::string* _s = _internal_mutable_proto_path();
  // @@protoc_insertion_point(field_mutable:huawei_telemetry.TelemetrySelfDefinedEvent.proto_path)
  return _s;
}
inline const std::string& TelemetrySelfDefinedEvent::_internal_proto_path() const {
  return proto_path_.Get();
}
inline void TelemetrySelfDefinedEvent::_internal_set_proto_path(const std::string& value) {
  
  proto_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TelemetrySelfDefinedEvent::_internal_mutable_proto_path() {
  
  return proto_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TelemetrySelfDefinedEvent::release_proto_path() {
  // @@protoc_insertion_point(field_release:huawei_telemetry.TelemetrySelfDefinedEvent.proto_path)
  return proto_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TelemetrySelfDefinedEvent::set_allocated_proto_path(std::string* proto_path) {
  if (proto_path != nullptr) {
    
  } else {
    
  }
  proto_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proto_path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (proto_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    proto_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:huawei_telemetry.TelemetrySelfDefinedEvent.proto_path)
}

// uint32 level = 2;
inline void TelemetrySelfDefinedEvent::clear_level() {
  level_ = 0u;
}
inline uint32_t TelemetrySelfDefinedEvent::_internal_level() const {
  return level_;
}
inline uint32_t TelemetrySelfDefinedEvent::level() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.TelemetrySelfDefinedEvent.level)
  return _internal_level();
}
inline void TelemetrySelfDefinedEvent::_internal_set_level(uint32_t value) {
  
  level_ = value;
}
inline void TelemetrySelfDefinedEvent::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:huawei_telemetry.TelemetrySelfDefinedEvent.level)
}

// string description = 3;
inline void TelemetrySelfDefinedEvent::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& TelemetrySelfDefinedEvent::description() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.TelemetrySelfDefinedEvent.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TelemetrySelfDefinedEvent::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:huawei_telemetry.TelemetrySelfDefinedEvent.description)
}
inline std::string* TelemetrySelfDefinedEvent::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:huawei_telemetry.TelemetrySelfDefinedEvent.description)
  return _s;
}
inline const std::string& TelemetrySelfDefinedEvent::_internal_description() const {
  return description_.Get();
}
inline void TelemetrySelfDefinedEvent::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TelemetrySelfDefinedEvent::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TelemetrySelfDefinedEvent::release_description() {
  // @@protoc_insertion_point(field_release:huawei_telemetry.TelemetrySelfDefinedEvent.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TelemetrySelfDefinedEvent::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:huawei_telemetry.TelemetrySelfDefinedEvent.description)
}

// string fieldName = 4;
inline void TelemetrySelfDefinedEvent::clear_fieldname() {
  fieldname_.ClearToEmpty();
}
inline const std::string& TelemetrySelfDefinedEvent::fieldname() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.TelemetrySelfDefinedEvent.fieldName)
  return _internal_fieldname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TelemetrySelfDefinedEvent::set_fieldname(ArgT0&& arg0, ArgT... args) {
 
 fieldname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:huawei_telemetry.TelemetrySelfDefinedEvent.fieldName)
}
inline std::string* TelemetrySelfDefinedEvent::mutable_fieldname() {
  std::string* _s = _internal_mutable_fieldname();
  // @@protoc_insertion_point(field_mutable:huawei_telemetry.TelemetrySelfDefinedEvent.fieldName)
  return _s;
}
inline const std::string& TelemetrySelfDefinedEvent::_internal_fieldname() const {
  return fieldname_.Get();
}
inline void TelemetrySelfDefinedEvent::_internal_set_fieldname(const std::string& value) {
  
  fieldname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TelemetrySelfDefinedEvent::_internal_mutable_fieldname() {
  
  return fieldname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TelemetrySelfDefinedEvent::release_fieldname() {
  // @@protoc_insertion_point(field_release:huawei_telemetry.TelemetrySelfDefinedEvent.fieldName)
  return fieldname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TelemetrySelfDefinedEvent::set_allocated_fieldname(std::string* fieldname) {
  if (fieldname != nullptr) {
    
  } else {
    
  }
  fieldname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fieldname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fieldname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    fieldname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:huawei_telemetry.TelemetrySelfDefinedEvent.fieldName)
}

// uint32 fieldValue = 5;
inline void TelemetrySelfDefinedEvent::clear_fieldvalue() {
  fieldvalue_ = 0u;
}
inline uint32_t TelemetrySelfDefinedEvent::_internal_fieldvalue() const {
  return fieldvalue_;
}
inline uint32_t TelemetrySelfDefinedEvent::fieldvalue() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.TelemetrySelfDefinedEvent.fieldValue)
  return _internal_fieldvalue();
}
inline void TelemetrySelfDefinedEvent::_internal_set_fieldvalue(uint32_t value) {
  
  fieldvalue_ = value;
}
inline void TelemetrySelfDefinedEvent::set_fieldvalue(uint32_t value) {
  _internal_set_fieldvalue(value);
  // @@protoc_insertion_point(field_set:huawei_telemetry.TelemetrySelfDefinedEvent.fieldValue)
}

// .huawei_telemetry.TelemetrySelfDefineThresTable data_threshold = 6;
inline bool TelemetrySelfDefinedEvent::_internal_has_data_threshold() const {
  return this != internal_default_instance() && data_threshold_ != nullptr;
}
inline bool TelemetrySelfDefinedEvent::has_data_threshold() const {
  return _internal_has_data_threshold();
}
inline void TelemetrySelfDefinedEvent::clear_data_threshold() {
  if (GetArenaForAllocation() == nullptr && data_threshold_ != nullptr) {
    delete data_threshold_;
  }
  data_threshold_ = nullptr;
}
inline const ::huawei_telemetry::TelemetrySelfDefineThresTable& TelemetrySelfDefinedEvent::_internal_data_threshold() const {
  const ::huawei_telemetry::TelemetrySelfDefineThresTable* p = data_threshold_;
  return p != nullptr ? *p : reinterpret_cast<const ::huawei_telemetry::TelemetrySelfDefineThresTable&>(
      ::huawei_telemetry::_TelemetrySelfDefineThresTable_default_instance_);
}
inline const ::huawei_telemetry::TelemetrySelfDefineThresTable& TelemetrySelfDefinedEvent::data_threshold() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.TelemetrySelfDefinedEvent.data_threshold)
  return _internal_data_threshold();
}
inline void TelemetrySelfDefinedEvent::unsafe_arena_set_allocated_data_threshold(
    ::huawei_telemetry::TelemetrySelfDefineThresTable* data_threshold) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_threshold_);
  }
  data_threshold_ = data_threshold;
  if (data_threshold) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:huawei_telemetry.TelemetrySelfDefinedEvent.data_threshold)
}
inline ::huawei_telemetry::TelemetrySelfDefineThresTable* TelemetrySelfDefinedEvent::release_data_threshold() {
  
  ::huawei_telemetry::TelemetrySelfDefineThresTable* temp = data_threshold_;
  data_threshold_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::huawei_telemetry::TelemetrySelfDefineThresTable* TelemetrySelfDefinedEvent::unsafe_arena_release_data_threshold() {
  // @@protoc_insertion_point(field_release:huawei_telemetry.TelemetrySelfDefinedEvent.data_threshold)
  
  ::huawei_telemetry::TelemetrySelfDefineThresTable* temp = data_threshold_;
  data_threshold_ = nullptr;
  return temp;
}
inline ::huawei_telemetry::TelemetrySelfDefineThresTable* TelemetrySelfDefinedEvent::_internal_mutable_data_threshold() {
  
  if (data_threshold_ == nullptr) {
    auto* p = CreateMaybeMessage<::huawei_telemetry::TelemetrySelfDefineThresTable>(GetArenaForAllocation());
    data_threshold_ = p;
  }
  return data_threshold_;
}
inline ::huawei_telemetry::TelemetrySelfDefineThresTable* TelemetrySelfDefinedEvent::mutable_data_threshold() {
  ::huawei_telemetry::TelemetrySelfDefineThresTable* _msg = _internal_mutable_data_threshold();
  // @@protoc_insertion_point(field_mutable:huawei_telemetry.TelemetrySelfDefinedEvent.data_threshold)
  return _msg;
}
inline void TelemetrySelfDefinedEvent::set_allocated_data_threshold(::huawei_telemetry::TelemetrySelfDefineThresTable* data_threshold) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_threshold_;
  }
  if (data_threshold) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::huawei_telemetry::TelemetrySelfDefineThresTable>::GetOwningArena(data_threshold);
    if (message_arena != submessage_arena) {
      data_threshold = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_threshold, submessage_arena);
    }
    
  } else {
    
  }
  data_threshold_ = data_threshold;
  // @@protoc_insertion_point(field_set_allocated:huawei_telemetry.TelemetrySelfDefinedEvent.data_threshold)
}

// .huawei_telemetry.TelemetrySelfDefinedEvent.ThresholdRelation thresholdRelation = 7;
inline void TelemetrySelfDefinedEvent::clear_thresholdrelation() {
  thresholdrelation_ = 0;
}
inline ::huawei_telemetry::TelemetrySelfDefinedEvent_ThresholdRelation TelemetrySelfDefinedEvent::_internal_thresholdrelation() const {
  return static_cast< ::huawei_telemetry::TelemetrySelfDefinedEvent_ThresholdRelation >(thresholdrelation_);
}
inline ::huawei_telemetry::TelemetrySelfDefinedEvent_ThresholdRelation TelemetrySelfDefinedEvent::thresholdrelation() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.TelemetrySelfDefinedEvent.thresholdRelation)
  return _internal_thresholdrelation();
}
inline void TelemetrySelfDefinedEvent::_internal_set_thresholdrelation(::huawei_telemetry::TelemetrySelfDefinedEvent_ThresholdRelation value) {
  
  thresholdrelation_ = value;
}
inline void TelemetrySelfDefinedEvent::set_thresholdrelation(::huawei_telemetry::TelemetrySelfDefinedEvent_ThresholdRelation value) {
  _internal_set_thresholdrelation(value);
  // @@protoc_insertion_point(field_set:huawei_telemetry.TelemetrySelfDefinedEvent.thresholdRelation)
}

// bytes content = 8;
inline void TelemetrySelfDefinedEvent::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& TelemetrySelfDefinedEvent::content() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.TelemetrySelfDefinedEvent.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TelemetrySelfDefinedEvent::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:huawei_telemetry.TelemetrySelfDefinedEvent.content)
}
inline std::string* TelemetrySelfDefinedEvent::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:huawei_telemetry.TelemetrySelfDefinedEvent.content)
  return _s;
}
inline const std::string& TelemetrySelfDefinedEvent::_internal_content() const {
  return content_.Get();
}
inline void TelemetrySelfDefinedEvent::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TelemetrySelfDefinedEvent::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TelemetrySelfDefinedEvent::release_content() {
  // @@protoc_insertion_point(field_release:huawei_telemetry.TelemetrySelfDefinedEvent.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TelemetrySelfDefinedEvent::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:huawei_telemetry.TelemetrySelfDefinedEvent.content)
}

// -------------------------------------------------------------------

// TelemetrySelfDefineThresTable

// repeated .huawei_telemetry.TelemetryThreshold row = 1;
inline int TelemetrySelfDefineThresTable::_internal_row_size() const {
  return row_.size();
}
inline int TelemetrySelfDefineThresTable::row_size() const {
  return _internal_row_size();
}
inline void TelemetrySelfDefineThresTable::clear_row() {
  row_.Clear();
}
inline ::huawei_telemetry::TelemetryThreshold* TelemetrySelfDefineThresTable::mutable_row(int index) {
  // @@protoc_insertion_point(field_mutable:huawei_telemetry.TelemetrySelfDefineThresTable.row)
  return row_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::huawei_telemetry::TelemetryThreshold >*
TelemetrySelfDefineThresTable::mutable_row() {
  // @@protoc_insertion_point(field_mutable_list:huawei_telemetry.TelemetrySelfDefineThresTable.row)
  return &row_;
}
inline const ::huawei_telemetry::TelemetryThreshold& TelemetrySelfDefineThresTable::_internal_row(int index) const {
  return row_.Get(index);
}
inline const ::huawei_telemetry::TelemetryThreshold& TelemetrySelfDefineThresTable::row(int index) const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.TelemetrySelfDefineThresTable.row)
  return _internal_row(index);
}
inline ::huawei_telemetry::TelemetryThreshold* TelemetrySelfDefineThresTable::_internal_add_row() {
  return row_.Add();
}
inline ::huawei_telemetry::TelemetryThreshold* TelemetrySelfDefineThresTable::add_row() {
  ::huawei_telemetry::TelemetryThreshold* _add = _internal_add_row();
  // @@protoc_insertion_point(field_add:huawei_telemetry.TelemetrySelfDefineThresTable.row)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::huawei_telemetry::TelemetryThreshold >&
TelemetrySelfDefineThresTable::row() const {
  // @@protoc_insertion_point(field_list:huawei_telemetry.TelemetrySelfDefineThresTable.row)
  return row_;
}

// -------------------------------------------------------------------

// TelemetryThreshold

// uint32 thresholdValue = 1;
inline void TelemetryThreshold::clear_thresholdvalue() {
  thresholdvalue_ = 0u;
}
inline uint32_t TelemetryThreshold::_internal_thresholdvalue() const {
  return thresholdvalue_;
}
inline uint32_t TelemetryThreshold::thresholdvalue() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.TelemetryThreshold.thresholdValue)
  return _internal_thresholdvalue();
}
inline void TelemetryThreshold::_internal_set_thresholdvalue(uint32_t value) {
  
  thresholdvalue_ = value;
}
inline void TelemetryThreshold::set_thresholdvalue(uint32_t value) {
  _internal_set_thresholdvalue(value);
  // @@protoc_insertion_point(field_set:huawei_telemetry.TelemetryThreshold.thresholdValue)
}

// .huawei_telemetry.TelemetryThreshold.ThresholdOpType thresholdOpType = 2;
inline void TelemetryThreshold::clear_thresholdoptype() {
  thresholdoptype_ = 0;
}
inline ::huawei_telemetry::TelemetryThreshold_ThresholdOpType TelemetryThreshold::_internal_thresholdoptype() const {
  return static_cast< ::huawei_telemetry::TelemetryThreshold_ThresholdOpType >(thresholdoptype_);
}
inline ::huawei_telemetry::TelemetryThreshold_ThresholdOpType TelemetryThreshold::thresholdoptype() const {
  // @@protoc_insertion_point(field_get:huawei_telemetry.TelemetryThreshold.thresholdOpType)
  return _internal_thresholdoptype();
}
inline void TelemetryThreshold::_internal_set_thresholdoptype(::huawei_telemetry::TelemetryThreshold_ThresholdOpType value) {
  
  thresholdoptype_ = value;
}
inline void TelemetryThreshold::set_thresholdoptype(::huawei_telemetry::TelemetryThreshold_ThresholdOpType value) {
  _internal_set_thresholdoptype(value);
  // @@protoc_insertion_point(field_set:huawei_telemetry.TelemetryThreshold.thresholdOpType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace huawei_telemetry

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::huawei_telemetry::Telemetry_Encoding> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::huawei_telemetry::Telemetry_Encoding>() {
  return ::huawei_telemetry::Telemetry_Encoding_descriptor();
}
template <> struct is_proto_enum< ::huawei_telemetry::TelemetrySelfDefinedEvent_ThresholdRelation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::huawei_telemetry::TelemetrySelfDefinedEvent_ThresholdRelation>() {
  return ::huawei_telemetry::TelemetrySelfDefinedEvent_ThresholdRelation_descriptor();
}
template <> struct is_proto_enum< ::huawei_telemetry::TelemetryThreshold_ThresholdOpType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::huawei_telemetry::TelemetryThreshold_ThresholdOpType>() {
  return ::huawei_telemetry::TelemetryThreshold_ThresholdOpType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_huawei_5ftelemetry_2eproto
