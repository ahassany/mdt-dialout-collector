// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: telemetry.proto

#include "telemetry.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace telemetry {
constexpr Telemetry::Telemetry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_id_str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , subscription_id_str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sensor_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , except_desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , product_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , proto_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ne_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , software_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_gpb_(nullptr)
  , collection_id_(uint64_t{0u})
  , collection_start_time_(uint64_t{0u})
  , msg_timestamp_(uint64_t{0u})
  , collection_end_time_(uint64_t{0u})
  , current_period_(0u)
  , encoding_(0)
{}
struct TelemetryDefaultTypeInternal {
  constexpr TelemetryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TelemetryDefaultTypeInternal() {}
  union {
    Telemetry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TelemetryDefaultTypeInternal _Telemetry_default_instance_;
constexpr TelemetryGPBTable::TelemetryGPBTable(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : row_()
  , delete__()
  , generator_(nullptr){}
struct TelemetryGPBTableDefaultTypeInternal {
  constexpr TelemetryGPBTableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TelemetryGPBTableDefaultTypeInternal() {}
  union {
    TelemetryGPBTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TelemetryGPBTableDefaultTypeInternal _TelemetryGPBTable_default_instance_;
constexpr Generator::Generator(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : generator_id_(uint64_t{0u})
  , generator_sn_(0u)
  , generator_sync_(false){}
struct GeneratorDefaultTypeInternal {
  constexpr GeneratorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GeneratorDefaultTypeInternal() {}
  union {
    Generator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GeneratorDefaultTypeInternal _Generator_default_instance_;
constexpr TelemetryRowGPB::TelemetryRowGPB(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(uint64_t{0u}){}
struct TelemetryRowGPBDefaultTypeInternal {
  constexpr TelemetryRowGPBDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TelemetryRowGPBDefaultTypeInternal() {}
  union {
    TelemetryRowGPB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TelemetryRowGPBDefaultTypeInternal _TelemetryRowGPB_default_instance_;
constexpr DataPath::DataPath(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(nullptr)
  , timestamp_(uint64_t{0u}){}
struct DataPathDefaultTypeInternal {
  constexpr DataPathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataPathDefaultTypeInternal() {}
  union {
    DataPath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataPathDefaultTypeInternal _DataPath_default_instance_;
constexpr Path::Path(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_(){}
struct PathDefaultTypeInternal {
  constexpr PathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PathDefaultTypeInternal() {}
  union {
    Path _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PathDefaultTypeInternal _Path_default_instance_;
constexpr PathElem_KeyEntry_DoNotUse::PathElem_KeyEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PathElem_KeyEntry_DoNotUseDefaultTypeInternal {
  constexpr PathElem_KeyEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PathElem_KeyEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PathElem_KeyEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PathElem_KeyEntry_DoNotUseDefaultTypeInternal _PathElem_KeyEntry_DoNotUse_default_instance_;
constexpr PathElem::PathElem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PathElemDefaultTypeInternal {
  constexpr PathElemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PathElemDefaultTypeInternal() {}
  union {
    PathElem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PathElemDefaultTypeInternal _PathElem_default_instance_;
constexpr TelemetrySelfDefinedEvent::TelemetrySelfDefinedEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fieldname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , proto_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_threshold_(nullptr)
  , level_(0u)
  , fieldvalue_(0u)
  , thresholdrelation_(0)
{}
struct TelemetrySelfDefinedEventDefaultTypeInternal {
  constexpr TelemetrySelfDefinedEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TelemetrySelfDefinedEventDefaultTypeInternal() {}
  union {
    TelemetrySelfDefinedEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TelemetrySelfDefinedEventDefaultTypeInternal _TelemetrySelfDefinedEvent_default_instance_;
constexpr TelemetrySelfDefineThresTable::TelemetrySelfDefineThresTable(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : row_(){}
struct TelemetrySelfDefineThresTableDefaultTypeInternal {
  constexpr TelemetrySelfDefineThresTableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TelemetrySelfDefineThresTableDefaultTypeInternal() {}
  union {
    TelemetrySelfDefineThresTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TelemetrySelfDefineThresTableDefaultTypeInternal _TelemetrySelfDefineThresTable_default_instance_;
constexpr TelemetryThreshold::TelemetryThreshold(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : thresholdvalue_(0u)
  , thresholdoptype_(0)
{}
struct TelemetryThresholdDefaultTypeInternal {
  constexpr TelemetryThresholdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TelemetryThresholdDefaultTypeInternal() {}
  union {
    TelemetryThreshold _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TelemetryThresholdDefaultTypeInternal _TelemetryThreshold_default_instance_;
}  // namespace telemetry
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_telemetry_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_telemetry_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_telemetry_2eproto = nullptr;

const uint32_t TableStruct_telemetry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::telemetry::Telemetry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::telemetry::Telemetry, node_id_str_),
  PROTOBUF_FIELD_OFFSET(::telemetry::Telemetry, subscription_id_str_),
  PROTOBUF_FIELD_OFFSET(::telemetry::Telemetry, sensor_path_),
  PROTOBUF_FIELD_OFFSET(::telemetry::Telemetry, proto_path_),
  PROTOBUF_FIELD_OFFSET(::telemetry::Telemetry, collection_id_),
  PROTOBUF_FIELD_OFFSET(::telemetry::Telemetry, collection_start_time_),
  PROTOBUF_FIELD_OFFSET(::telemetry::Telemetry, msg_timestamp_),
  PROTOBUF_FIELD_OFFSET(::telemetry::Telemetry, data_gpb_),
  PROTOBUF_FIELD_OFFSET(::telemetry::Telemetry, collection_end_time_),
  PROTOBUF_FIELD_OFFSET(::telemetry::Telemetry, current_period_),
  PROTOBUF_FIELD_OFFSET(::telemetry::Telemetry, except_desc_),
  PROTOBUF_FIELD_OFFSET(::telemetry::Telemetry, product_name_),
  PROTOBUF_FIELD_OFFSET(::telemetry::Telemetry, encoding_),
  PROTOBUF_FIELD_OFFSET(::telemetry::Telemetry, data_str_),
  PROTOBUF_FIELD_OFFSET(::telemetry::Telemetry, ne_id_),
  PROTOBUF_FIELD_OFFSET(::telemetry::Telemetry, software_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::telemetry::TelemetryGPBTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::telemetry::TelemetryGPBTable, row_),
  PROTOBUF_FIELD_OFFSET(::telemetry::TelemetryGPBTable, delete__),
  PROTOBUF_FIELD_OFFSET(::telemetry::TelemetryGPBTable, generator_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::telemetry::Generator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::telemetry::Generator, generator_id_),
  PROTOBUF_FIELD_OFFSET(::telemetry::Generator, generator_sn_),
  PROTOBUF_FIELD_OFFSET(::telemetry::Generator, generator_sync_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::telemetry::TelemetryRowGPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::telemetry::TelemetryRowGPB, timestamp_),
  PROTOBUF_FIELD_OFFSET(::telemetry::TelemetryRowGPB, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::telemetry::DataPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::telemetry::DataPath, timestamp_),
  PROTOBUF_FIELD_OFFSET(::telemetry::DataPath, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::telemetry::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::telemetry::Path, node_),
  PROTOBUF_FIELD_OFFSET(::telemetry::PathElem_KeyEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::telemetry::PathElem_KeyEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::telemetry::PathElem_KeyEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::telemetry::PathElem_KeyEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::telemetry::PathElem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::telemetry::PathElem, name_),
  PROTOBUF_FIELD_OFFSET(::telemetry::PathElem, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::telemetry::TelemetrySelfDefinedEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::telemetry::TelemetrySelfDefinedEvent, path_),
  PROTOBUF_FIELD_OFFSET(::telemetry::TelemetrySelfDefinedEvent, proto_path_),
  PROTOBUF_FIELD_OFFSET(::telemetry::TelemetrySelfDefinedEvent, level_),
  PROTOBUF_FIELD_OFFSET(::telemetry::TelemetrySelfDefinedEvent, description_),
  PROTOBUF_FIELD_OFFSET(::telemetry::TelemetrySelfDefinedEvent, fieldname_),
  PROTOBUF_FIELD_OFFSET(::telemetry::TelemetrySelfDefinedEvent, fieldvalue_),
  PROTOBUF_FIELD_OFFSET(::telemetry::TelemetrySelfDefinedEvent, data_threshold_),
  PROTOBUF_FIELD_OFFSET(::telemetry::TelemetrySelfDefinedEvent, thresholdrelation_),
  PROTOBUF_FIELD_OFFSET(::telemetry::TelemetrySelfDefinedEvent, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::telemetry::TelemetrySelfDefineThresTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::telemetry::TelemetrySelfDefineThresTable, row_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::telemetry::TelemetryThreshold, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::telemetry::TelemetryThreshold, thresholdvalue_),
  PROTOBUF_FIELD_OFFSET(::telemetry::TelemetryThreshold, thresholdoptype_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::telemetry::Telemetry)},
  { 22, -1, -1, sizeof(::telemetry::TelemetryGPBTable)},
  { 31, -1, -1, sizeof(::telemetry::Generator)},
  { 40, -1, -1, sizeof(::telemetry::TelemetryRowGPB)},
  { 48, -1, -1, sizeof(::telemetry::DataPath)},
  { 56, -1, -1, sizeof(::telemetry::Path)},
  { 63, 71, -1, sizeof(::telemetry::PathElem_KeyEntry_DoNotUse)},
  { 73, -1, -1, sizeof(::telemetry::PathElem)},
  { 81, -1, -1, sizeof(::telemetry::TelemetrySelfDefinedEvent)},
  { 96, -1, -1, sizeof(::telemetry::TelemetrySelfDefineThresTable)},
  { 103, -1, -1, sizeof(::telemetry::TelemetryThreshold)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::telemetry::_Telemetry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::telemetry::_TelemetryGPBTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::telemetry::_Generator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::telemetry::_TelemetryRowGPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::telemetry::_DataPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::telemetry::_Path_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::telemetry::_PathElem_KeyEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::telemetry::_PathElem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::telemetry::_TelemetrySelfDefinedEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::telemetry::_TelemetrySelfDefineThresTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::telemetry::_TelemetryThreshold_default_instance_),
};

const char descriptor_table_protodef_telemetry_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017telemetry.proto\022\ttelemetry\"\340\003\n\tTelemet"
  "ry\022\023\n\013node_id_str\030\001 \001(\t\022\033\n\023subscription_"
  "id_str\030\002 \001(\t\022\023\n\013sensor_path\030\003 \001(\t\022\022\n\npro"
  "to_path\030\r \001(\t\022\025\n\rcollection_id\030\004 \001(\004\022\035\n\025"
  "collection_start_time\030\005 \001(\004\022\025\n\rmsg_times"
  "tamp\030\006 \001(\004\022.\n\010data_gpb\030\007 \001(\0132\034.telemetry"
  ".TelemetryGPBTable\022\033\n\023collection_end_tim"
  "e\030\010 \001(\004\022\026\n\016current_period\030\t \001(\r\022\023\n\013excep"
  "t_desc\030\n \001(\t\022\024\n\014product_name\030\013 \001(\t\022/\n\010en"
  "coding\030\014 \001(\0162\035.telemetry.Telemetry.Encod"
  "ing\022\020\n\010data_str\030\016 \001(\t\022\r\n\005ne_id\030\017 \001(\t\022\030\n\020"
  "software_version\030\020 \001(\t\"/\n\010Encoding\022\020\n\014En"
  "coding_GPB\020\000\022\021\n\rEncoding_JSON\020\001\"\212\001\n\021Tele"
  "metryGPBTable\022\'\n\003row\030\001 \003(\0132\032.telemetry.T"
  "elemetryRowGPB\022#\n\006delete\030\002 \003(\0132\023.telemet"
  "ry.DataPath\022\'\n\tgenerator\030\003 \001(\0132\024.telemet"
  "ry.Generator\"O\n\tGenerator\022\024\n\014generator_i"
  "d\030\001 \001(\004\022\024\n\014generator_sn\030\002 \001(\r\022\026\n\016generat"
  "or_sync\030\003 \001(\010\"5\n\017TelemetryRowGPB\022\021\n\ttime"
  "stamp\030\001 \001(\004\022\017\n\007content\030\013 \001(\014\"<\n\010DataPath"
  "\022\021\n\ttimestamp\030\001 \001(\004\022\035\n\004path\030\002 \001(\0132\017.tele"
  "metry.Path\")\n\004Path\022!\n\004node\030\001 \003(\0132\023.telem"
  "etry.PathElem\"o\n\010PathElem\022\014\n\004name\030\001 \001(\t\022"
  ")\n\003key\030\002 \003(\0132\034.telemetry.PathElem.KeyEnt"
  "ry\032*\n\010KeyEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001"
  "(\t:\0028\001\"\227\003\n\031TelemetrySelfDefinedEvent\022\014\n\004"
  "path\030\001 \001(\t\022\022\n\nproto_path\030\r \001(\t\022\r\n\005level\030"
  "\002 \001(\r\022\023\n\013description\030\003 \001(\t\022\021\n\tfieldName\030"
  "\004 \001(\t\022\022\n\nfieldValue\030\005 \001(\r\022@\n\016data_thresh"
  "old\030\006 \001(\0132(.telemetry.TelemetrySelfDefin"
  "eThresTable\022Q\n\021thresholdRelation\030\007 \001(\01626"
  ".telemetry.TelemetrySelfDefinedEvent.Thr"
  "esholdRelation\022\017\n\007content\030\010 \001(\014\"g\n\021Thres"
  "holdRelation\022\035\n\031ThresholdRelation_INVALI"
  "D\020\000\022\031\n\025ThresholdRelation_AND\020\001\022\030\n\024Thresh"
  "oldRelation_OR\020\002\"K\n\035TelemetrySelfDefineT"
  "hresTable\022*\n\003row\030\001 \003(\0132\035.telemetry.Telem"
  "etryThreshold\"\200\002\n\022TelemetryThreshold\022\026\n\016"
  "thresholdValue\030\001 \001(\r\022F\n\017thresholdOpType\030"
  "\002 \001(\0162-.telemetry.TelemetryThreshold.Thr"
  "esholdOpType\"\211\001\n\017ThresholdOpType\022\026\n\022Thre"
  "sholdOpType_EQ\020\000\022\026\n\022ThresholdOpType_GT\020\001"
  "\022\026\n\022ThresholdOpType_GE\020\002\022\026\n\022ThresholdOpT"
  "ype_LT\020\003\022\026\n\022ThresholdOpType_LE\020\004b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_telemetry_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_telemetry_2eproto = {
  false, false, 1760, descriptor_table_protodef_telemetry_2eproto, "telemetry.proto", 
  &descriptor_table_telemetry_2eproto_once, nullptr, 0, 11,
  schemas, file_default_instances, TableStruct_telemetry_2eproto::offsets,
  file_level_metadata_telemetry_2eproto, file_level_enum_descriptors_telemetry_2eproto, file_level_service_descriptors_telemetry_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_telemetry_2eproto_getter() {
  return &descriptor_table_telemetry_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_telemetry_2eproto(&descriptor_table_telemetry_2eproto);
namespace telemetry {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Telemetry_Encoding_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_telemetry_2eproto);
  return file_level_enum_descriptors_telemetry_2eproto[0];
}
bool Telemetry_Encoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Telemetry_Encoding Telemetry::Encoding_GPB;
constexpr Telemetry_Encoding Telemetry::Encoding_JSON;
constexpr Telemetry_Encoding Telemetry::Encoding_MIN;
constexpr Telemetry_Encoding Telemetry::Encoding_MAX;
constexpr int Telemetry::Encoding_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TelemetrySelfDefinedEvent_ThresholdRelation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_telemetry_2eproto);
  return file_level_enum_descriptors_telemetry_2eproto[1];
}
bool TelemetrySelfDefinedEvent_ThresholdRelation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TelemetrySelfDefinedEvent_ThresholdRelation TelemetrySelfDefinedEvent::ThresholdRelation_INVALID;
constexpr TelemetrySelfDefinedEvent_ThresholdRelation TelemetrySelfDefinedEvent::ThresholdRelation_AND;
constexpr TelemetrySelfDefinedEvent_ThresholdRelation TelemetrySelfDefinedEvent::ThresholdRelation_OR;
constexpr TelemetrySelfDefinedEvent_ThresholdRelation TelemetrySelfDefinedEvent::ThresholdRelation_MIN;
constexpr TelemetrySelfDefinedEvent_ThresholdRelation TelemetrySelfDefinedEvent::ThresholdRelation_MAX;
constexpr int TelemetrySelfDefinedEvent::ThresholdRelation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TelemetryThreshold_ThresholdOpType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_telemetry_2eproto);
  return file_level_enum_descriptors_telemetry_2eproto[2];
}
bool TelemetryThreshold_ThresholdOpType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TelemetryThreshold_ThresholdOpType TelemetryThreshold::ThresholdOpType_EQ;
constexpr TelemetryThreshold_ThresholdOpType TelemetryThreshold::ThresholdOpType_GT;
constexpr TelemetryThreshold_ThresholdOpType TelemetryThreshold::ThresholdOpType_GE;
constexpr TelemetryThreshold_ThresholdOpType TelemetryThreshold::ThresholdOpType_LT;
constexpr TelemetryThreshold_ThresholdOpType TelemetryThreshold::ThresholdOpType_LE;
constexpr TelemetryThreshold_ThresholdOpType TelemetryThreshold::ThresholdOpType_MIN;
constexpr TelemetryThreshold_ThresholdOpType TelemetryThreshold::ThresholdOpType_MAX;
constexpr int TelemetryThreshold::ThresholdOpType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Telemetry::_Internal {
 public:
  static const ::telemetry::TelemetryGPBTable& data_gpb(const Telemetry* msg);
};

const ::telemetry::TelemetryGPBTable&
Telemetry::_Internal::data_gpb(const Telemetry* msg) {
  return *msg->data_gpb_;
}
Telemetry::Telemetry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:telemetry.Telemetry)
}
Telemetry::Telemetry(const Telemetry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_id_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    node_id_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_id_str().empty()) {
    node_id_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_id_str(), 
      GetArenaForAllocation());
  }
  subscription_id_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    subscription_id_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subscription_id_str().empty()) {
    subscription_id_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_subscription_id_str(), 
      GetArenaForAllocation());
  }
  sensor_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sensor_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sensor_path().empty()) {
    sensor_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sensor_path(), 
      GetArenaForAllocation());
  }
  except_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    except_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_except_desc().empty()) {
    except_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_except_desc(), 
      GetArenaForAllocation());
  }
  product_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    product_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_product_name().empty()) {
    product_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_product_name(), 
      GetArenaForAllocation());
  }
  proto_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    proto_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proto_path().empty()) {
    proto_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proto_path(), 
      GetArenaForAllocation());
  }
  data_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data_str().empty()) {
    data_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data_str(), 
      GetArenaForAllocation());
  }
  ne_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ne_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ne_id().empty()) {
    ne_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ne_id(), 
      GetArenaForAllocation());
  }
  software_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    software_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_software_version().empty()) {
    software_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_software_version(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_data_gpb()) {
    data_gpb_ = new ::telemetry::TelemetryGPBTable(*from.data_gpb_);
  } else {
    data_gpb_ = nullptr;
  }
  ::memcpy(&collection_id_, &from.collection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&encoding_) -
    reinterpret_cast<char*>(&collection_id_)) + sizeof(encoding_));
  // @@protoc_insertion_point(copy_constructor:telemetry.Telemetry)
}

inline void Telemetry::SharedCtor() {
node_id_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  node_id_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
subscription_id_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  subscription_id_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sensor_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sensor_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
except_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  except_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
product_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  product_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
proto_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  proto_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ne_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ne_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
software_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  software_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_gpb_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&encoding_) -
    reinterpret_cast<char*>(&data_gpb_)) + sizeof(encoding_));
}

Telemetry::~Telemetry() {
  // @@protoc_insertion_point(destructor:telemetry.Telemetry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Telemetry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  node_id_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subscription_id_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sensor_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  except_desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proto_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ne_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  software_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_gpb_;
}

void Telemetry::ArenaDtor(void* object) {
  Telemetry* _this = reinterpret_cast< Telemetry* >(object);
  (void)_this;
}
void Telemetry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Telemetry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Telemetry::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry.Telemetry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_str_.ClearToEmpty();
  subscription_id_str_.ClearToEmpty();
  sensor_path_.ClearToEmpty();
  except_desc_.ClearToEmpty();
  product_name_.ClearToEmpty();
  proto_path_.ClearToEmpty();
  data_str_.ClearToEmpty();
  ne_id_.ClearToEmpty();
  software_version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && data_gpb_ != nullptr) {
    delete data_gpb_;
  }
  data_gpb_ = nullptr;
  ::memset(&collection_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encoding_) -
      reinterpret_cast<char*>(&collection_id_)) + sizeof(encoding_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Telemetry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string node_id_str = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_node_id_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "telemetry.Telemetry.node_id_str"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string subscription_id_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_subscription_id_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "telemetry.Telemetry.subscription_id_str"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sensor_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sensor_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "telemetry.Telemetry.sensor_path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 collection_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          collection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 collection_start_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          collection_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 msg_timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          msg_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .telemetry.TelemetryGPBTable data_gpb = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_gpb(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 collection_end_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          collection_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 current_period = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          current_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string except_desc = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_except_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "telemetry.Telemetry.except_desc"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string product_name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_product_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "telemetry.Telemetry.product_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .telemetry.Telemetry.Encoding encoding = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encoding(static_cast<::telemetry::Telemetry_Encoding>(val));
        } else
          goto handle_unusual;
        continue;
      // string proto_path = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_proto_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "telemetry.Telemetry.proto_path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string data_str = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_data_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "telemetry.Telemetry.data_str"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ne_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_ne_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "telemetry.Telemetry.ne_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string software_version = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_software_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "telemetry.Telemetry.software_version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Telemetry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:telemetry.Telemetry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id_str = 1;
  if (!this->_internal_node_id_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id_str().data(), static_cast<int>(this->_internal_node_id_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "telemetry.Telemetry.node_id_str");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_node_id_str(), target);
  }

  // string subscription_id_str = 2;
  if (!this->_internal_subscription_id_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subscription_id_str().data(), static_cast<int>(this->_internal_subscription_id_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "telemetry.Telemetry.subscription_id_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_subscription_id_str(), target);
  }

  // string sensor_path = 3;
  if (!this->_internal_sensor_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sensor_path().data(), static_cast<int>(this->_internal_sensor_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "telemetry.Telemetry.sensor_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sensor_path(), target);
  }

  // uint64 collection_id = 4;
  if (this->_internal_collection_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_collection_id(), target);
  }

  // uint64 collection_start_time = 5;
  if (this->_internal_collection_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_collection_start_time(), target);
  }

  // uint64 msg_timestamp = 6;
  if (this->_internal_msg_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_msg_timestamp(), target);
  }

  // .telemetry.TelemetryGPBTable data_gpb = 7;
  if (this->_internal_has_data_gpb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::data_gpb(this), target, stream);
  }

  // uint64 collection_end_time = 8;
  if (this->_internal_collection_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_collection_end_time(), target);
  }

  // uint32 current_period = 9;
  if (this->_internal_current_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_current_period(), target);
  }

  // string except_desc = 10;
  if (!this->_internal_except_desc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_except_desc().data(), static_cast<int>(this->_internal_except_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "telemetry.Telemetry.except_desc");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_except_desc(), target);
  }

  // string product_name = 11;
  if (!this->_internal_product_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_product_name().data(), static_cast<int>(this->_internal_product_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "telemetry.Telemetry.product_name");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_product_name(), target);
  }

  // .telemetry.Telemetry.Encoding encoding = 12;
  if (this->_internal_encoding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_encoding(), target);
  }

  // string proto_path = 13;
  if (!this->_internal_proto_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proto_path().data(), static_cast<int>(this->_internal_proto_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "telemetry.Telemetry.proto_path");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_proto_path(), target);
  }

  // string data_str = 14;
  if (!this->_internal_data_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data_str().data(), static_cast<int>(this->_internal_data_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "telemetry.Telemetry.data_str");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_data_str(), target);
  }

  // string ne_id = 15;
  if (!this->_internal_ne_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ne_id().data(), static_cast<int>(this->_internal_ne_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "telemetry.Telemetry.ne_id");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_ne_id(), target);
  }

  // string software_version = 16;
  if (!this->_internal_software_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_software_version().data(), static_cast<int>(this->_internal_software_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "telemetry.Telemetry.software_version");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_software_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry.Telemetry)
  return target;
}

size_t Telemetry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry.Telemetry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_id_str = 1;
  if (!this->_internal_node_id_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id_str());
  }

  // string subscription_id_str = 2;
  if (!this->_internal_subscription_id_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subscription_id_str());
  }

  // string sensor_path = 3;
  if (!this->_internal_sensor_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sensor_path());
  }

  // string except_desc = 10;
  if (!this->_internal_except_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_except_desc());
  }

  // string product_name = 11;
  if (!this->_internal_product_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product_name());
  }

  // string proto_path = 13;
  if (!this->_internal_proto_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proto_path());
  }

  // string data_str = 14;
  if (!this->_internal_data_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data_str());
  }

  // string ne_id = 15;
  if (!this->_internal_ne_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ne_id());
  }

  // string software_version = 16;
  if (!this->_internal_software_version().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_software_version());
  }

  // .telemetry.TelemetryGPBTable data_gpb = 7;
  if (this->_internal_has_data_gpb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_gpb_);
  }

  // uint64 collection_id = 4;
  if (this->_internal_collection_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_collection_id());
  }

  // uint64 collection_start_time = 5;
  if (this->_internal_collection_start_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_collection_start_time());
  }

  // uint64 msg_timestamp = 6;
  if (this->_internal_msg_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_msg_timestamp());
  }

  // uint64 collection_end_time = 8;
  if (this->_internal_collection_end_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_collection_end_time());
  }

  // uint32 current_period = 9;
  if (this->_internal_current_period() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_current_period());
  }

  // .telemetry.Telemetry.Encoding encoding = 12;
  if (this->_internal_encoding() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_encoding());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Telemetry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Telemetry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Telemetry::GetClassData() const { return &_class_data_; }

void Telemetry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Telemetry *>(to)->MergeFrom(
      static_cast<const Telemetry &>(from));
}


void Telemetry::MergeFrom(const Telemetry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry.Telemetry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node_id_str().empty()) {
    _internal_set_node_id_str(from._internal_node_id_str());
  }
  if (!from._internal_subscription_id_str().empty()) {
    _internal_set_subscription_id_str(from._internal_subscription_id_str());
  }
  if (!from._internal_sensor_path().empty()) {
    _internal_set_sensor_path(from._internal_sensor_path());
  }
  if (!from._internal_except_desc().empty()) {
    _internal_set_except_desc(from._internal_except_desc());
  }
  if (!from._internal_product_name().empty()) {
    _internal_set_product_name(from._internal_product_name());
  }
  if (!from._internal_proto_path().empty()) {
    _internal_set_proto_path(from._internal_proto_path());
  }
  if (!from._internal_data_str().empty()) {
    _internal_set_data_str(from._internal_data_str());
  }
  if (!from._internal_ne_id().empty()) {
    _internal_set_ne_id(from._internal_ne_id());
  }
  if (!from._internal_software_version().empty()) {
    _internal_set_software_version(from._internal_software_version());
  }
  if (from._internal_has_data_gpb()) {
    _internal_mutable_data_gpb()->::telemetry::TelemetryGPBTable::MergeFrom(from._internal_data_gpb());
  }
  if (from._internal_collection_id() != 0) {
    _internal_set_collection_id(from._internal_collection_id());
  }
  if (from._internal_collection_start_time() != 0) {
    _internal_set_collection_start_time(from._internal_collection_start_time());
  }
  if (from._internal_msg_timestamp() != 0) {
    _internal_set_msg_timestamp(from._internal_msg_timestamp());
  }
  if (from._internal_collection_end_time() != 0) {
    _internal_set_collection_end_time(from._internal_collection_end_time());
  }
  if (from._internal_current_period() != 0) {
    _internal_set_current_period(from._internal_current_period());
  }
  if (from._internal_encoding() != 0) {
    _internal_set_encoding(from._internal_encoding());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Telemetry::CopyFrom(const Telemetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry.Telemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Telemetry::IsInitialized() const {
  return true;
}

void Telemetry::InternalSwap(Telemetry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_id_str_, lhs_arena,
      &other->node_id_str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &subscription_id_str_, lhs_arena,
      &other->subscription_id_str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sensor_path_, lhs_arena,
      &other->sensor_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &except_desc_, lhs_arena,
      &other->except_desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &product_name_, lhs_arena,
      &other->product_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &proto_path_, lhs_arena,
      &other->proto_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_str_, lhs_arena,
      &other->data_str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ne_id_, lhs_arena,
      &other->ne_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &software_version_, lhs_arena,
      &other->software_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Telemetry, encoding_)
      + sizeof(Telemetry::encoding_)
      - PROTOBUF_FIELD_OFFSET(Telemetry, data_gpb_)>(
          reinterpret_cast<char*>(&data_gpb_),
          reinterpret_cast<char*>(&other->data_gpb_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Telemetry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_telemetry_2eproto_getter, &descriptor_table_telemetry_2eproto_once,
      file_level_metadata_telemetry_2eproto[0]);
}

// ===================================================================

class TelemetryGPBTable::_Internal {
 public:
  static const ::telemetry::Generator& generator(const TelemetryGPBTable* msg);
};

const ::telemetry::Generator&
TelemetryGPBTable::_Internal::generator(const TelemetryGPBTable* msg) {
  return *msg->generator_;
}
TelemetryGPBTable::TelemetryGPBTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  row_(arena),
  delete__(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:telemetry.TelemetryGPBTable)
}
TelemetryGPBTable::TelemetryGPBTable(const TelemetryGPBTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      row_(from.row_),
      delete__(from.delete__) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_generator()) {
    generator_ = new ::telemetry::Generator(*from.generator_);
  } else {
    generator_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:telemetry.TelemetryGPBTable)
}

inline void TelemetryGPBTable::SharedCtor() {
generator_ = nullptr;
}

TelemetryGPBTable::~TelemetryGPBTable() {
  // @@protoc_insertion_point(destructor:telemetry.TelemetryGPBTable)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TelemetryGPBTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete generator_;
}

void TelemetryGPBTable::ArenaDtor(void* object) {
  TelemetryGPBTable* _this = reinterpret_cast< TelemetryGPBTable* >(object);
  (void)_this;
}
void TelemetryGPBTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TelemetryGPBTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TelemetryGPBTable::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry.TelemetryGPBTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_.Clear();
  delete__.Clear();
  if (GetArenaForAllocation() == nullptr && generator_ != nullptr) {
    delete generator_;
  }
  generator_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TelemetryGPBTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .telemetry.TelemetryRowGPB row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .telemetry.DataPath delete = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delete_(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .telemetry.Generator generator = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_generator(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TelemetryGPBTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:telemetry.TelemetryGPBTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .telemetry.TelemetryRowGPB row = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_row_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_row(i), target, stream);
  }

  // repeated .telemetry.DataPath delete = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_delete__size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_delete_(i), target, stream);
  }

  // .telemetry.Generator generator = 3;
  if (this->_internal_has_generator()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::generator(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry.TelemetryGPBTable)
  return target;
}

size_t TelemetryGPBTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry.TelemetryGPBTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .telemetry.TelemetryRowGPB row = 1;
  total_size += 1UL * this->_internal_row_size();
  for (const auto& msg : this->row_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .telemetry.DataPath delete = 2;
  total_size += 1UL * this->_internal_delete__size();
  for (const auto& msg : this->delete__) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .telemetry.Generator generator = 3;
  if (this->_internal_has_generator()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *generator_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TelemetryGPBTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TelemetryGPBTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TelemetryGPBTable::GetClassData() const { return &_class_data_; }

void TelemetryGPBTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TelemetryGPBTable *>(to)->MergeFrom(
      static_cast<const TelemetryGPBTable &>(from));
}


void TelemetryGPBTable::MergeFrom(const TelemetryGPBTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry.TelemetryGPBTable)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  row_.MergeFrom(from.row_);
  delete__.MergeFrom(from.delete__);
  if (from._internal_has_generator()) {
    _internal_mutable_generator()->::telemetry::Generator::MergeFrom(from._internal_generator());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TelemetryGPBTable::CopyFrom(const TelemetryGPBTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry.TelemetryGPBTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryGPBTable::IsInitialized() const {
  return true;
}

void TelemetryGPBTable::InternalSwap(TelemetryGPBTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  row_.InternalSwap(&other->row_);
  delete__.InternalSwap(&other->delete__);
  swap(generator_, other->generator_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TelemetryGPBTable::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_telemetry_2eproto_getter, &descriptor_table_telemetry_2eproto_once,
      file_level_metadata_telemetry_2eproto[1]);
}

// ===================================================================

class Generator::_Internal {
 public:
};

Generator::Generator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:telemetry.Generator)
}
Generator::Generator(const Generator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&generator_id_, &from.generator_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&generator_sync_) -
    reinterpret_cast<char*>(&generator_id_)) + sizeof(generator_sync_));
  // @@protoc_insertion_point(copy_constructor:telemetry.Generator)
}

inline void Generator::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&generator_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&generator_sync_) -
    reinterpret_cast<char*>(&generator_id_)) + sizeof(generator_sync_));
}

Generator::~Generator() {
  // @@protoc_insertion_point(destructor:telemetry.Generator)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Generator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Generator::ArenaDtor(void* object) {
  Generator* _this = reinterpret_cast< Generator* >(object);
  (void)_this;
}
void Generator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Generator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Generator::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry.Generator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&generator_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&generator_sync_) -
      reinterpret_cast<char*>(&generator_id_)) + sizeof(generator_sync_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Generator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 generator_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          generator_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 generator_sn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          generator_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool generator_sync = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          generator_sync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Generator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:telemetry.Generator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 generator_id = 1;
  if (this->_internal_generator_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_generator_id(), target);
  }

  // uint32 generator_sn = 2;
  if (this->_internal_generator_sn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_generator_sn(), target);
  }

  // bool generator_sync = 3;
  if (this->_internal_generator_sync() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_generator_sync(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry.Generator)
  return target;
}

size_t Generator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry.Generator)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 generator_id = 1;
  if (this->_internal_generator_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_generator_id());
  }

  // uint32 generator_sn = 2;
  if (this->_internal_generator_sn() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_generator_sn());
  }

  // bool generator_sync = 3;
  if (this->_internal_generator_sync() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Generator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Generator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Generator::GetClassData() const { return &_class_data_; }

void Generator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Generator *>(to)->MergeFrom(
      static_cast<const Generator &>(from));
}


void Generator::MergeFrom(const Generator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry.Generator)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_generator_id() != 0) {
    _internal_set_generator_id(from._internal_generator_id());
  }
  if (from._internal_generator_sn() != 0) {
    _internal_set_generator_sn(from._internal_generator_sn());
  }
  if (from._internal_generator_sync() != 0) {
    _internal_set_generator_sync(from._internal_generator_sync());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Generator::CopyFrom(const Generator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry.Generator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Generator::IsInitialized() const {
  return true;
}

void Generator::InternalSwap(Generator* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Generator, generator_sync_)
      + sizeof(Generator::generator_sync_)
      - PROTOBUF_FIELD_OFFSET(Generator, generator_id_)>(
          reinterpret_cast<char*>(&generator_id_),
          reinterpret_cast<char*>(&other->generator_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Generator::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_telemetry_2eproto_getter, &descriptor_table_telemetry_2eproto_once,
      file_level_metadata_telemetry_2eproto[2]);
}

// ===================================================================

class TelemetryRowGPB::_Internal {
 public:
};

TelemetryRowGPB::TelemetryRowGPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:telemetry.TelemetryRowGPB)
}
TelemetryRowGPB::TelemetryRowGPB(const TelemetryRowGPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArenaForAllocation());
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:telemetry.TelemetryRowGPB)
}

inline void TelemetryRowGPB::SharedCtor() {
content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
timestamp_ = uint64_t{0u};
}

TelemetryRowGPB::~TelemetryRowGPB() {
  // @@protoc_insertion_point(destructor:telemetry.TelemetryRowGPB)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TelemetryRowGPB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TelemetryRowGPB::ArenaDtor(void* object) {
  TelemetryRowGPB* _this = reinterpret_cast< TelemetryRowGPB* >(object);
  (void)_this;
}
void TelemetryRowGPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TelemetryRowGPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TelemetryRowGPB::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry.TelemetryRowGPB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmpty();
  timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TelemetryRowGPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes content = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TelemetryRowGPB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:telemetry.TelemetryRowGPB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // bytes content = 11;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry.TelemetryRowGPB)
  return target;
}

size_t TelemetryRowGPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry.TelemetryRowGPB)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes content = 11;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TelemetryRowGPB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TelemetryRowGPB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TelemetryRowGPB::GetClassData() const { return &_class_data_; }

void TelemetryRowGPB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TelemetryRowGPB *>(to)->MergeFrom(
      static_cast<const TelemetryRowGPB &>(from));
}


void TelemetryRowGPB::MergeFrom(const TelemetryRowGPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry.TelemetryRowGPB)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TelemetryRowGPB::CopyFrom(const TelemetryRowGPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry.TelemetryRowGPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryRowGPB::IsInitialized() const {
  return true;
}

void TelemetryRowGPB::InternalSwap(TelemetryRowGPB* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &content_, lhs_arena,
      &other->content_, rhs_arena
  );
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TelemetryRowGPB::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_telemetry_2eproto_getter, &descriptor_table_telemetry_2eproto_once,
      file_level_metadata_telemetry_2eproto[3]);
}

// ===================================================================

class DataPath::_Internal {
 public:
  static const ::telemetry::Path& path(const DataPath* msg);
};

const ::telemetry::Path&
DataPath::_Internal::path(const DataPath* msg) {
  return *msg->path_;
}
DataPath::DataPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:telemetry.DataPath)
}
DataPath::DataPath(const DataPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path()) {
    path_ = new ::telemetry::Path(*from.path_);
  } else {
    path_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:telemetry.DataPath)
}

inline void DataPath::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&path_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&path_)) + sizeof(timestamp_));
}

DataPath::~DataPath() {
  // @@protoc_insertion_point(destructor:telemetry.DataPath)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataPath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete path_;
}

void DataPath::ArenaDtor(void* object) {
  DataPath* _this = reinterpret_cast< DataPath* >(object);
  (void)_this;
}
void DataPath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataPath::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry.DataPath)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .telemetry.Path path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataPath::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:telemetry.DataPath)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .telemetry.Path path = 2;
  if (this->_internal_has_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::path(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry.DataPath)
  return target;
}

size_t DataPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry.DataPath)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .telemetry.Path path = 2;
  if (this->_internal_has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_);
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataPath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataPath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataPath::GetClassData() const { return &_class_data_; }

void DataPath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DataPath *>(to)->MergeFrom(
      static_cast<const DataPath &>(from));
}


void DataPath::MergeFrom(const DataPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry.DataPath)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_path()) {
    _internal_mutable_path()->::telemetry::Path::MergeFrom(from._internal_path());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataPath::CopyFrom(const DataPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry.DataPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataPath::IsInitialized() const {
  return true;
}

void DataPath::InternalSwap(DataPath* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataPath, timestamp_)
      + sizeof(DataPath::timestamp_)
      - PROTOBUF_FIELD_OFFSET(DataPath, path_)>(
          reinterpret_cast<char*>(&path_),
          reinterpret_cast<char*>(&other->path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataPath::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_telemetry_2eproto_getter, &descriptor_table_telemetry_2eproto_once,
      file_level_metadata_telemetry_2eproto[4]);
}

// ===================================================================

class Path::_Internal {
 public:
};

Path::Path(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  node_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:telemetry.Path)
}
Path::Path(const Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      node_(from.node_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:telemetry.Path)
}

inline void Path::SharedCtor() {
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:telemetry.Path)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Path::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Path::ArenaDtor(void* object) {
  Path* _this = reinterpret_cast< Path* >(object);
  (void)_this;
}
void Path::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Path::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry.Path)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Path::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .telemetry.PathElem node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Path::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:telemetry.Path)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .telemetry.PathElem node = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_node_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_node(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry.Path)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .telemetry.PathElem node = 1;
  total_size += 1UL * this->_internal_node_size();
  for (const auto& msg : this->node_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Path::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Path::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Path::GetClassData() const { return &_class_data_; }

void Path::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Path *>(to)->MergeFrom(
      static_cast<const Path &>(from));
}


void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry.Path)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  node_.MergeFrom(from.node_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::InternalSwap(Path* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  node_.InternalSwap(&other->node_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Path::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_telemetry_2eproto_getter, &descriptor_table_telemetry_2eproto_once,
      file_level_metadata_telemetry_2eproto[5]);
}

// ===================================================================

PathElem_KeyEntry_DoNotUse::PathElem_KeyEntry_DoNotUse() {}
PathElem_KeyEntry_DoNotUse::PathElem_KeyEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PathElem_KeyEntry_DoNotUse::MergeFrom(const PathElem_KeyEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PathElem_KeyEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_telemetry_2eproto_getter, &descriptor_table_telemetry_2eproto_once,
      file_level_metadata_telemetry_2eproto[6]);
}

// ===================================================================

class PathElem::_Internal {
 public:
};

PathElem::PathElem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  key_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:telemetry.PathElem)
}
PathElem::PathElem(const PathElem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.MergeFrom(from.key_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:telemetry.PathElem)
}

inline void PathElem::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PathElem::~PathElem() {
  // @@protoc_insertion_point(destructor:telemetry.PathElem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PathElem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PathElem::ArenaDtor(void* object) {
  PathElem* _this = reinterpret_cast< PathElem* >(object);
  (void)_this;
  _this->key_. ~MapField();
}
inline void PathElem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &PathElem::ArenaDtor);
  }
}
void PathElem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PathElem::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry.PathElem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.Clear();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathElem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "telemetry.PathElem.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&key_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PathElem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:telemetry.PathElem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "telemetry.PathElem.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // map<string, string> key = 2;
  if (!this->_internal_key().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "telemetry.PathElem.KeyEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "telemetry.PathElem.KeyEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_key().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_key().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_key().begin();
          it != this->_internal_key().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PathElem_KeyEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_key().begin();
          it != this->_internal_key().end(); ++it) {
        target = PathElem_KeyEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry.PathElem)
  return target;
}

size_t PathElem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry.PathElem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> key = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_key_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_key().begin();
      it != this->_internal_key().end(); ++it) {
    total_size += PathElem_KeyEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PathElem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PathElem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PathElem::GetClassData() const { return &_class_data_; }

void PathElem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PathElem *>(to)->MergeFrom(
      static_cast<const PathElem &>(from));
}


void PathElem::MergeFrom(const PathElem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry.PathElem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  key_.MergeFrom(from.key_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PathElem::CopyFrom(const PathElem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry.PathElem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathElem::IsInitialized() const {
  return true;
}

void PathElem::InternalSwap(PathElem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  key_.InternalSwap(&other->key_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PathElem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_telemetry_2eproto_getter, &descriptor_table_telemetry_2eproto_once,
      file_level_metadata_telemetry_2eproto[7]);
}

// ===================================================================

class TelemetrySelfDefinedEvent::_Internal {
 public:
  static const ::telemetry::TelemetrySelfDefineThresTable& data_threshold(const TelemetrySelfDefinedEvent* msg);
};

const ::telemetry::TelemetrySelfDefineThresTable&
TelemetrySelfDefinedEvent::_Internal::data_threshold(const TelemetrySelfDefinedEvent* msg) {
  return *msg->data_threshold_;
}
TelemetrySelfDefinedEvent::TelemetrySelfDefinedEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:telemetry.TelemetrySelfDefinedEvent)
}
TelemetrySelfDefinedEvent::TelemetrySelfDefinedEvent(const TelemetrySelfDefinedEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  fieldname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fieldname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fieldname().empty()) {
    fieldname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fieldname(), 
      GetArenaForAllocation());
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArenaForAllocation());
  }
  proto_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    proto_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proto_path().empty()) {
    proto_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proto_path(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_data_threshold()) {
    data_threshold_ = new ::telemetry::TelemetrySelfDefineThresTable(*from.data_threshold_);
  } else {
    data_threshold_ = nullptr;
  }
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&thresholdrelation_) -
    reinterpret_cast<char*>(&level_)) + sizeof(thresholdrelation_));
  // @@protoc_insertion_point(copy_constructor:telemetry.TelemetrySelfDefinedEvent)
}

inline void TelemetrySelfDefinedEvent::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
fieldname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fieldname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
proto_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  proto_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_threshold_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&thresholdrelation_) -
    reinterpret_cast<char*>(&data_threshold_)) + sizeof(thresholdrelation_));
}

TelemetrySelfDefinedEvent::~TelemetrySelfDefinedEvent() {
  // @@protoc_insertion_point(destructor:telemetry.TelemetrySelfDefinedEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TelemetrySelfDefinedEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fieldname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proto_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_threshold_;
}

void TelemetrySelfDefinedEvent::ArenaDtor(void* object) {
  TelemetrySelfDefinedEvent* _this = reinterpret_cast< TelemetrySelfDefinedEvent* >(object);
  (void)_this;
}
void TelemetrySelfDefinedEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TelemetrySelfDefinedEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TelemetrySelfDefinedEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry.TelemetrySelfDefinedEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  description_.ClearToEmpty();
  fieldname_.ClearToEmpty();
  content_.ClearToEmpty();
  proto_path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && data_threshold_ != nullptr) {
    delete data_threshold_;
  }
  data_threshold_ = nullptr;
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thresholdrelation_) -
      reinterpret_cast<char*>(&level_)) + sizeof(thresholdrelation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TelemetrySelfDefinedEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "telemetry.TelemetrySelfDefinedEvent.path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "telemetry.TelemetrySelfDefinedEvent.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string fieldName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_fieldname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "telemetry.TelemetrySelfDefinedEvent.fieldName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 fieldValue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          fieldvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .telemetry.TelemetrySelfDefineThresTable data_threshold = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_threshold(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .telemetry.TelemetrySelfDefinedEvent.ThresholdRelation thresholdRelation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_thresholdrelation(static_cast<::telemetry::TelemetrySelfDefinedEvent_ThresholdRelation>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes content = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string proto_path = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_proto_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "telemetry.TelemetrySelfDefinedEvent.proto_path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TelemetrySelfDefinedEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:telemetry.TelemetrySelfDefinedEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "telemetry.TelemetrySelfDefinedEvent.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "telemetry.TelemetrySelfDefinedEvent.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // string fieldName = 4;
  if (!this->_internal_fieldname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fieldname().data(), static_cast<int>(this->_internal_fieldname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "telemetry.TelemetrySelfDefinedEvent.fieldName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_fieldname(), target);
  }

  // uint32 fieldValue = 5;
  if (this->_internal_fieldvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_fieldvalue(), target);
  }

  // .telemetry.TelemetrySelfDefineThresTable data_threshold = 6;
  if (this->_internal_has_data_threshold()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::data_threshold(this), target, stream);
  }

  // .telemetry.TelemetrySelfDefinedEvent.ThresholdRelation thresholdRelation = 7;
  if (this->_internal_thresholdrelation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_thresholdrelation(), target);
  }

  // bytes content = 8;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_content(), target);
  }

  // string proto_path = 13;
  if (!this->_internal_proto_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proto_path().data(), static_cast<int>(this->_internal_proto_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "telemetry.TelemetrySelfDefinedEvent.proto_path");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_proto_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry.TelemetrySelfDefinedEvent)
  return target;
}

size_t TelemetrySelfDefinedEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry.TelemetrySelfDefinedEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string fieldName = 4;
  if (!this->_internal_fieldname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fieldname());
  }

  // bytes content = 8;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  // string proto_path = 13;
  if (!this->_internal_proto_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proto_path());
  }

  // .telemetry.TelemetrySelfDefineThresTable data_threshold = 6;
  if (this->_internal_has_data_threshold()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_threshold_);
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // uint32 fieldValue = 5;
  if (this->_internal_fieldvalue() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_fieldvalue());
  }

  // .telemetry.TelemetrySelfDefinedEvent.ThresholdRelation thresholdRelation = 7;
  if (this->_internal_thresholdrelation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_thresholdrelation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TelemetrySelfDefinedEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TelemetrySelfDefinedEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TelemetrySelfDefinedEvent::GetClassData() const { return &_class_data_; }

void TelemetrySelfDefinedEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TelemetrySelfDefinedEvent *>(to)->MergeFrom(
      static_cast<const TelemetrySelfDefinedEvent &>(from));
}


void TelemetrySelfDefinedEvent::MergeFrom(const TelemetrySelfDefinedEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry.TelemetrySelfDefinedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_fieldname().empty()) {
    _internal_set_fieldname(from._internal_fieldname());
  }
  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  if (!from._internal_proto_path().empty()) {
    _internal_set_proto_path(from._internal_proto_path());
  }
  if (from._internal_has_data_threshold()) {
    _internal_mutable_data_threshold()->::telemetry::TelemetrySelfDefineThresTable::MergeFrom(from._internal_data_threshold());
  }
  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from._internal_fieldvalue() != 0) {
    _internal_set_fieldvalue(from._internal_fieldvalue());
  }
  if (from._internal_thresholdrelation() != 0) {
    _internal_set_thresholdrelation(from._internal_thresholdrelation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TelemetrySelfDefinedEvent::CopyFrom(const TelemetrySelfDefinedEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry.TelemetrySelfDefinedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySelfDefinedEvent::IsInitialized() const {
  return true;
}

void TelemetrySelfDefinedEvent::InternalSwap(TelemetrySelfDefinedEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fieldname_, lhs_arena,
      &other->fieldname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &content_, lhs_arena,
      &other->content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &proto_path_, lhs_arena,
      &other->proto_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TelemetrySelfDefinedEvent, thresholdrelation_)
      + sizeof(TelemetrySelfDefinedEvent::thresholdrelation_)
      - PROTOBUF_FIELD_OFFSET(TelemetrySelfDefinedEvent, data_threshold_)>(
          reinterpret_cast<char*>(&data_threshold_),
          reinterpret_cast<char*>(&other->data_threshold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TelemetrySelfDefinedEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_telemetry_2eproto_getter, &descriptor_table_telemetry_2eproto_once,
      file_level_metadata_telemetry_2eproto[8]);
}

// ===================================================================

class TelemetrySelfDefineThresTable::_Internal {
 public:
};

TelemetrySelfDefineThresTable::TelemetrySelfDefineThresTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  row_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:telemetry.TelemetrySelfDefineThresTable)
}
TelemetrySelfDefineThresTable::TelemetrySelfDefineThresTable(const TelemetrySelfDefineThresTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      row_(from.row_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:telemetry.TelemetrySelfDefineThresTable)
}

inline void TelemetrySelfDefineThresTable::SharedCtor() {
}

TelemetrySelfDefineThresTable::~TelemetrySelfDefineThresTable() {
  // @@protoc_insertion_point(destructor:telemetry.TelemetrySelfDefineThresTable)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TelemetrySelfDefineThresTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TelemetrySelfDefineThresTable::ArenaDtor(void* object) {
  TelemetrySelfDefineThresTable* _this = reinterpret_cast< TelemetrySelfDefineThresTable* >(object);
  (void)_this;
}
void TelemetrySelfDefineThresTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TelemetrySelfDefineThresTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TelemetrySelfDefineThresTable::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry.TelemetrySelfDefineThresTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TelemetrySelfDefineThresTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .telemetry.TelemetryThreshold row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TelemetrySelfDefineThresTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:telemetry.TelemetrySelfDefineThresTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .telemetry.TelemetryThreshold row = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_row_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_row(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry.TelemetrySelfDefineThresTable)
  return target;
}

size_t TelemetrySelfDefineThresTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry.TelemetrySelfDefineThresTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .telemetry.TelemetryThreshold row = 1;
  total_size += 1UL * this->_internal_row_size();
  for (const auto& msg : this->row_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TelemetrySelfDefineThresTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TelemetrySelfDefineThresTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TelemetrySelfDefineThresTable::GetClassData() const { return &_class_data_; }

void TelemetrySelfDefineThresTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TelemetrySelfDefineThresTable *>(to)->MergeFrom(
      static_cast<const TelemetrySelfDefineThresTable &>(from));
}


void TelemetrySelfDefineThresTable::MergeFrom(const TelemetrySelfDefineThresTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry.TelemetrySelfDefineThresTable)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  row_.MergeFrom(from.row_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TelemetrySelfDefineThresTable::CopyFrom(const TelemetrySelfDefineThresTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry.TelemetrySelfDefineThresTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetrySelfDefineThresTable::IsInitialized() const {
  return true;
}

void TelemetrySelfDefineThresTable::InternalSwap(TelemetrySelfDefineThresTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  row_.InternalSwap(&other->row_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TelemetrySelfDefineThresTable::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_telemetry_2eproto_getter, &descriptor_table_telemetry_2eproto_once,
      file_level_metadata_telemetry_2eproto[9]);
}

// ===================================================================

class TelemetryThreshold::_Internal {
 public:
};

TelemetryThreshold::TelemetryThreshold(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:telemetry.TelemetryThreshold)
}
TelemetryThreshold::TelemetryThreshold(const TelemetryThreshold& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&thresholdvalue_, &from.thresholdvalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&thresholdoptype_) -
    reinterpret_cast<char*>(&thresholdvalue_)) + sizeof(thresholdoptype_));
  // @@protoc_insertion_point(copy_constructor:telemetry.TelemetryThreshold)
}

inline void TelemetryThreshold::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&thresholdvalue_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&thresholdoptype_) -
    reinterpret_cast<char*>(&thresholdvalue_)) + sizeof(thresholdoptype_));
}

TelemetryThreshold::~TelemetryThreshold() {
  // @@protoc_insertion_point(destructor:telemetry.TelemetryThreshold)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TelemetryThreshold::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TelemetryThreshold::ArenaDtor(void* object) {
  TelemetryThreshold* _this = reinterpret_cast< TelemetryThreshold* >(object);
  (void)_this;
}
void TelemetryThreshold::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TelemetryThreshold::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TelemetryThreshold::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry.TelemetryThreshold)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&thresholdvalue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thresholdoptype_) -
      reinterpret_cast<char*>(&thresholdvalue_)) + sizeof(thresholdoptype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TelemetryThreshold::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 thresholdValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          thresholdvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .telemetry.TelemetryThreshold.ThresholdOpType thresholdOpType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_thresholdoptype(static_cast<::telemetry::TelemetryThreshold_ThresholdOpType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TelemetryThreshold::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:telemetry.TelemetryThreshold)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 thresholdValue = 1;
  if (this->_internal_thresholdvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_thresholdvalue(), target);
  }

  // .telemetry.TelemetryThreshold.ThresholdOpType thresholdOpType = 2;
  if (this->_internal_thresholdoptype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_thresholdoptype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry.TelemetryThreshold)
  return target;
}

size_t TelemetryThreshold::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry.TelemetryThreshold)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 thresholdValue = 1;
  if (this->_internal_thresholdvalue() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_thresholdvalue());
  }

  // .telemetry.TelemetryThreshold.ThresholdOpType thresholdOpType = 2;
  if (this->_internal_thresholdoptype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_thresholdoptype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TelemetryThreshold::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TelemetryThreshold::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TelemetryThreshold::GetClassData() const { return &_class_data_; }

void TelemetryThreshold::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TelemetryThreshold *>(to)->MergeFrom(
      static_cast<const TelemetryThreshold &>(from));
}


void TelemetryThreshold::MergeFrom(const TelemetryThreshold& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry.TelemetryThreshold)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_thresholdvalue() != 0) {
    _internal_set_thresholdvalue(from._internal_thresholdvalue());
  }
  if (from._internal_thresholdoptype() != 0) {
    _internal_set_thresholdoptype(from._internal_thresholdoptype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TelemetryThreshold::CopyFrom(const TelemetryThreshold& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry.TelemetryThreshold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryThreshold::IsInitialized() const {
  return true;
}

void TelemetryThreshold::InternalSwap(TelemetryThreshold* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TelemetryThreshold, thresholdoptype_)
      + sizeof(TelemetryThreshold::thresholdoptype_)
      - PROTOBUF_FIELD_OFFSET(TelemetryThreshold, thresholdvalue_)>(
          reinterpret_cast<char*>(&thresholdvalue_),
          reinterpret_cast<char*>(&other->thresholdvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TelemetryThreshold::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_telemetry_2eproto_getter, &descriptor_table_telemetry_2eproto_once,
      file_level_metadata_telemetry_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace telemetry
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::telemetry::Telemetry* Arena::CreateMaybeMessage< ::telemetry::Telemetry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::telemetry::Telemetry >(arena);
}
template<> PROTOBUF_NOINLINE ::telemetry::TelemetryGPBTable* Arena::CreateMaybeMessage< ::telemetry::TelemetryGPBTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::telemetry::TelemetryGPBTable >(arena);
}
template<> PROTOBUF_NOINLINE ::telemetry::Generator* Arena::CreateMaybeMessage< ::telemetry::Generator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::telemetry::Generator >(arena);
}
template<> PROTOBUF_NOINLINE ::telemetry::TelemetryRowGPB* Arena::CreateMaybeMessage< ::telemetry::TelemetryRowGPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::telemetry::TelemetryRowGPB >(arena);
}
template<> PROTOBUF_NOINLINE ::telemetry::DataPath* Arena::CreateMaybeMessage< ::telemetry::DataPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::telemetry::DataPath >(arena);
}
template<> PROTOBUF_NOINLINE ::telemetry::Path* Arena::CreateMaybeMessage< ::telemetry::Path >(Arena* arena) {
  return Arena::CreateMessageInternal< ::telemetry::Path >(arena);
}
template<> PROTOBUF_NOINLINE ::telemetry::PathElem_KeyEntry_DoNotUse* Arena::CreateMaybeMessage< ::telemetry::PathElem_KeyEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::telemetry::PathElem_KeyEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::telemetry::PathElem* Arena::CreateMaybeMessage< ::telemetry::PathElem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::telemetry::PathElem >(arena);
}
template<> PROTOBUF_NOINLINE ::telemetry::TelemetrySelfDefinedEvent* Arena::CreateMaybeMessage< ::telemetry::TelemetrySelfDefinedEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::telemetry::TelemetrySelfDefinedEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::telemetry::TelemetrySelfDefineThresTable* Arena::CreateMaybeMessage< ::telemetry::TelemetrySelfDefineThresTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::telemetry::TelemetrySelfDefineThresTable >(arena);
}
template<> PROTOBUF_NOINLINE ::telemetry::TelemetryThreshold* Arena::CreateMaybeMessage< ::telemetry::TelemetryThreshold >(Arena* arena) {
  return Arena::CreateMessageInternal< ::telemetry::TelemetryThreshold >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
