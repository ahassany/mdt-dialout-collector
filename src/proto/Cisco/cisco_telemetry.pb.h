// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cisco_telemetry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cisco_5ftelemetry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cisco_5ftelemetry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cisco_5ftelemetry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cisco_5ftelemetry_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cisco_5ftelemetry_2eproto;
namespace cisco_telemetry {
class Telemetry;
struct TelemetryDefaultTypeInternal;
extern TelemetryDefaultTypeInternal _Telemetry_default_instance_;
class TelemetryField;
struct TelemetryFieldDefaultTypeInternal;
extern TelemetryFieldDefaultTypeInternal _TelemetryField_default_instance_;
class TelemetryGPBTable;
struct TelemetryGPBTableDefaultTypeInternal;
extern TelemetryGPBTableDefaultTypeInternal _TelemetryGPBTable_default_instance_;
class TelemetryRowGPB;
struct TelemetryRowGPBDefaultTypeInternal;
extern TelemetryRowGPBDefaultTypeInternal _TelemetryRowGPB_default_instance_;
}  // namespace cisco_telemetry
PROTOBUF_NAMESPACE_OPEN
template<> ::cisco_telemetry::Telemetry* Arena::CreateMaybeMessage<::cisco_telemetry::Telemetry>(Arena*);
template<> ::cisco_telemetry::TelemetryField* Arena::CreateMaybeMessage<::cisco_telemetry::TelemetryField>(Arena*);
template<> ::cisco_telemetry::TelemetryGPBTable* Arena::CreateMaybeMessage<::cisco_telemetry::TelemetryGPBTable>(Arena*);
template<> ::cisco_telemetry::TelemetryRowGPB* Arena::CreateMaybeMessage<::cisco_telemetry::TelemetryRowGPB>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cisco_telemetry {

// ===================================================================

class Telemetry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cisco_telemetry.Telemetry) */ {
 public:
  inline Telemetry() : Telemetry(nullptr) {}
  ~Telemetry() override;
  explicit constexpr Telemetry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Telemetry(const Telemetry& from);
  Telemetry(Telemetry&& from) noexcept
    : Telemetry() {
    *this = ::std::move(from);
  }

  inline Telemetry& operator=(const Telemetry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Telemetry& operator=(Telemetry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Telemetry& default_instance() {
    return *internal_default_instance();
  }
  enum NodeIdCase {
    kNodeIdStr = 1,
    NODE_ID_NOT_SET = 0,
  };

  enum SubscriptionCase {
    kSubscriptionIdStr = 3,
    SUBSCRIPTION_NOT_SET = 0,
  };

  static inline const Telemetry* internal_default_instance() {
    return reinterpret_cast<const Telemetry*>(
               &_Telemetry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Telemetry& a, Telemetry& b) {
    a.Swap(&b);
  }
  inline void Swap(Telemetry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Telemetry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Telemetry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Telemetry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Telemetry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Telemetry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Telemetry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cisco_telemetry.Telemetry";
  }
  protected:
  explicit Telemetry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataGpbkvFieldNumber = 11,
    kEncodingPathFieldNumber = 6,
    kModelVersionFieldNumber = 7,
    kDataGpbFieldNumber = 12,
    kCollectionIdFieldNumber = 8,
    kCollectionStartTimeFieldNumber = 9,
    kMsgTimestampFieldNumber = 10,
    kCollectionEndTimeFieldNumber = 13,
    kNodeIdStrFieldNumber = 1,
    kSubscriptionIdStrFieldNumber = 3,
  };
  // repeated .cisco_telemetry.TelemetryField data_gpbkv = 11;
  int data_gpbkv_size() const;
  private:
  int _internal_data_gpbkv_size() const;
  public:
  void clear_data_gpbkv();
  ::cisco_telemetry::TelemetryField* mutable_data_gpbkv(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cisco_telemetry::TelemetryField >*
      mutable_data_gpbkv();
  private:
  const ::cisco_telemetry::TelemetryField& _internal_data_gpbkv(int index) const;
  ::cisco_telemetry::TelemetryField* _internal_add_data_gpbkv();
  public:
  const ::cisco_telemetry::TelemetryField& data_gpbkv(int index) const;
  ::cisco_telemetry::TelemetryField* add_data_gpbkv();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cisco_telemetry::TelemetryField >&
      data_gpbkv() const;

  // string encoding_path = 6;
  void clear_encoding_path();
  const std::string& encoding_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encoding_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encoding_path();
  PROTOBUF_NODISCARD std::string* release_encoding_path();
  void set_allocated_encoding_path(std::string* encoding_path);
  private:
  const std::string& _internal_encoding_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encoding_path(const std::string& value);
  std::string* _internal_mutable_encoding_path();
  public:

  // string model_version = 7;
  void clear_model_version();
  const std::string& model_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_version();
  PROTOBUF_NODISCARD std::string* release_model_version();
  void set_allocated_model_version(std::string* model_version);
  private:
  const std::string& _internal_model_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_version(const std::string& value);
  std::string* _internal_mutable_model_version();
  public:

  // .cisco_telemetry.TelemetryGPBTable data_gpb = 12;
  bool has_data_gpb() const;
  private:
  bool _internal_has_data_gpb() const;
  public:
  void clear_data_gpb();
  const ::cisco_telemetry::TelemetryGPBTable& data_gpb() const;
  PROTOBUF_NODISCARD ::cisco_telemetry::TelemetryGPBTable* release_data_gpb();
  ::cisco_telemetry::TelemetryGPBTable* mutable_data_gpb();
  void set_allocated_data_gpb(::cisco_telemetry::TelemetryGPBTable* data_gpb);
  private:
  const ::cisco_telemetry::TelemetryGPBTable& _internal_data_gpb() const;
  ::cisco_telemetry::TelemetryGPBTable* _internal_mutable_data_gpb();
  public:
  void unsafe_arena_set_allocated_data_gpb(
      ::cisco_telemetry::TelemetryGPBTable* data_gpb);
  ::cisco_telemetry::TelemetryGPBTable* unsafe_arena_release_data_gpb();

  // uint64 collection_id = 8;
  void clear_collection_id();
  uint64_t collection_id() const;
  void set_collection_id(uint64_t value);
  private:
  uint64_t _internal_collection_id() const;
  void _internal_set_collection_id(uint64_t value);
  public:

  // uint64 collection_start_time = 9;
  void clear_collection_start_time();
  uint64_t collection_start_time() const;
  void set_collection_start_time(uint64_t value);
  private:
  uint64_t _internal_collection_start_time() const;
  void _internal_set_collection_start_time(uint64_t value);
  public:

  // uint64 msg_timestamp = 10;
  void clear_msg_timestamp();
  uint64_t msg_timestamp() const;
  void set_msg_timestamp(uint64_t value);
  private:
  uint64_t _internal_msg_timestamp() const;
  void _internal_set_msg_timestamp(uint64_t value);
  public:

  // uint64 collection_end_time = 13;
  void clear_collection_end_time();
  uint64_t collection_end_time() const;
  void set_collection_end_time(uint64_t value);
  private:
  uint64_t _internal_collection_end_time() const;
  void _internal_set_collection_end_time(uint64_t value);
  public:

  // string node_id_str = 1;
  bool has_node_id_str() const;
  private:
  bool _internal_has_node_id_str() const;
  public:
  void clear_node_id_str();
  const std::string& node_id_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_node_id_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_node_id_str();
  PROTOBUF_NODISCARD std::string* release_node_id_str();
  void set_allocated_node_id_str(std::string* node_id_str);
  private:
  const std::string& _internal_node_id_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_id_str(const std::string& value);
  std::string* _internal_mutable_node_id_str();
  public:

  // string subscription_id_str = 3;
  bool has_subscription_id_str() const;
  private:
  bool _internal_has_subscription_id_str() const;
  public:
  void clear_subscription_id_str();
  const std::string& subscription_id_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subscription_id_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subscription_id_str();
  PROTOBUF_NODISCARD std::string* release_subscription_id_str();
  void set_allocated_subscription_id_str(std::string* subscription_id_str);
  private:
  const std::string& _internal_subscription_id_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subscription_id_str(const std::string& value);
  std::string* _internal_mutable_subscription_id_str();
  public:

  void clear_node_id();
  NodeIdCase node_id_case() const;
  void clear_subscription();
  SubscriptionCase subscription_case() const;
  // @@protoc_insertion_point(class_scope:cisco_telemetry.Telemetry)
 private:
  class _Internal;
  void set_has_node_id_str();
  void set_has_subscription_id_str();

  inline bool has_node_id() const;
  inline void clear_has_node_id();

  inline bool has_subscription() const;
  inline void clear_has_subscription();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cisco_telemetry::TelemetryField > data_gpbkv_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoding_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_version_;
  ::cisco_telemetry::TelemetryGPBTable* data_gpb_;
  uint64_t collection_id_;
  uint64_t collection_start_time_;
  uint64_t msg_timestamp_;
  uint64_t collection_end_time_;
  union NodeIdUnion {
    constexpr NodeIdUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_str_;
  } node_id_;
  union SubscriptionUnion {
    constexpr SubscriptionUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_id_str_;
  } subscription_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[2];

  friend struct ::TableStruct_cisco_5ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class TelemetryField final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cisco_telemetry.TelemetryField) */ {
 public:
  inline TelemetryField() : TelemetryField(nullptr) {}
  ~TelemetryField() override;
  explicit constexpr TelemetryField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TelemetryField(const TelemetryField& from);
  TelemetryField(TelemetryField&& from) noexcept
    : TelemetryField() {
    *this = ::std::move(from);
  }

  inline TelemetryField& operator=(const TelemetryField& from) {
    CopyFrom(from);
    return *this;
  }
  inline TelemetryField& operator=(TelemetryField&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TelemetryField& default_instance() {
    return *internal_default_instance();
  }
  enum ValueByTypeCase {
    kBytesValue = 4,
    kStringValue = 5,
    kBoolValue = 6,
    kUint32Value = 7,
    kUint64Value = 8,
    kSint32Value = 9,
    kSint64Value = 10,
    kDoubleValue = 11,
    kFloatValue = 12,
    VALUE_BY_TYPE_NOT_SET = 0,
  };

  static inline const TelemetryField* internal_default_instance() {
    return reinterpret_cast<const TelemetryField*>(
               &_TelemetryField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TelemetryField& a, TelemetryField& b) {
    a.Swap(&b);
  }
  inline void Swap(TelemetryField* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TelemetryField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TelemetryField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TelemetryField>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TelemetryField& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TelemetryField& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TelemetryField* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cisco_telemetry.TelemetryField";
  }
  protected:
  explicit TelemetryField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 15,
    kNameFieldNumber = 2,
    kTimestampFieldNumber = 1,
    kDeleteFieldNumber = 16,
    kBytesValueFieldNumber = 4,
    kStringValueFieldNumber = 5,
    kBoolValueFieldNumber = 6,
    kUint32ValueFieldNumber = 7,
    kUint64ValueFieldNumber = 8,
    kSint32ValueFieldNumber = 9,
    kSint64ValueFieldNumber = 10,
    kDoubleValueFieldNumber = 11,
    kFloatValueFieldNumber = 12,
  };
  // repeated .cisco_telemetry.TelemetryField fields = 15;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::cisco_telemetry::TelemetryField* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cisco_telemetry::TelemetryField >*
      mutable_fields();
  private:
  const ::cisco_telemetry::TelemetryField& _internal_fields(int index) const;
  ::cisco_telemetry::TelemetryField* _internal_add_fields();
  public:
  const ::cisco_telemetry::TelemetryField& fields(int index) const;
  ::cisco_telemetry::TelemetryField* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cisco_telemetry::TelemetryField >&
      fields() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 timestamp = 1;
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // bool delete = 16;
  void clear_delete_();
  bool delete_() const;
  void set_delete_(bool value);
  private:
  bool _internal_delete_() const;
  void _internal_set_delete_(bool value);
  public:

  // bytes bytes_value = 4;
  bool has_bytes_value() const;
  private:
  bool _internal_has_bytes_value() const;
  public:
  void clear_bytes_value();
  const std::string& bytes_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bytes_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bytes_value();
  PROTOBUF_NODISCARD std::string* release_bytes_value();
  void set_allocated_bytes_value(std::string* bytes_value);
  private:
  const std::string& _internal_bytes_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes_value(const std::string& value);
  std::string* _internal_mutable_bytes_value();
  public:

  // string string_value = 5;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // bool bool_value = 6;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // uint32 uint32_value = 7;
  bool has_uint32_value() const;
  private:
  bool _internal_has_uint32_value() const;
  public:
  void clear_uint32_value();
  uint32_t uint32_value() const;
  void set_uint32_value(uint32_t value);
  private:
  uint32_t _internal_uint32_value() const;
  void _internal_set_uint32_value(uint32_t value);
  public:

  // uint64 uint64_value = 8;
  bool has_uint64_value() const;
  private:
  bool _internal_has_uint64_value() const;
  public:
  void clear_uint64_value();
  uint64_t uint64_value() const;
  void set_uint64_value(uint64_t value);
  private:
  uint64_t _internal_uint64_value() const;
  void _internal_set_uint64_value(uint64_t value);
  public:

  // sint32 sint32_value = 9;
  bool has_sint32_value() const;
  private:
  bool _internal_has_sint32_value() const;
  public:
  void clear_sint32_value();
  int32_t sint32_value() const;
  void set_sint32_value(int32_t value);
  private:
  int32_t _internal_sint32_value() const;
  void _internal_set_sint32_value(int32_t value);
  public:

  // sint64 sint64_value = 10;
  bool has_sint64_value() const;
  private:
  bool _internal_has_sint64_value() const;
  public:
  void clear_sint64_value();
  int64_t sint64_value() const;
  void set_sint64_value(int64_t value);
  private:
  int64_t _internal_sint64_value() const;
  void _internal_set_sint64_value(int64_t value);
  public:

  // double double_value = 11;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // float float_value = 12;
  bool has_float_value() const;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  float float_value() const;
  void set_float_value(float value);
  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);
  public:

  void clear_value_by_type();
  ValueByTypeCase value_by_type_case() const;
  // @@protoc_insertion_point(class_scope:cisco_telemetry.TelemetryField)
 private:
  class _Internal;
  void set_has_bytes_value();
  void set_has_string_value();
  void set_has_bool_value();
  void set_has_uint32_value();
  void set_has_uint64_value();
  void set_has_sint32_value();
  void set_has_sint64_value();
  void set_has_double_value();
  void set_has_float_value();

  inline bool has_value_by_type() const;
  inline void clear_has_value_by_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cisco_telemetry::TelemetryField > fields_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint64_t timestamp_;
  bool delete__;
  union ValueByTypeUnion {
    constexpr ValueByTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    bool bool_value_;
    uint32_t uint32_value_;
    uint64_t uint64_value_;
    int32_t sint32_value_;
    int64_t sint64_value_;
    double double_value_;
    float float_value_;
  } value_by_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_cisco_5ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class TelemetryGPBTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cisco_telemetry.TelemetryGPBTable) */ {
 public:
  inline TelemetryGPBTable() : TelemetryGPBTable(nullptr) {}
  ~TelemetryGPBTable() override;
  explicit constexpr TelemetryGPBTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TelemetryGPBTable(const TelemetryGPBTable& from);
  TelemetryGPBTable(TelemetryGPBTable&& from) noexcept
    : TelemetryGPBTable() {
    *this = ::std::move(from);
  }

  inline TelemetryGPBTable& operator=(const TelemetryGPBTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TelemetryGPBTable& operator=(TelemetryGPBTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TelemetryGPBTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const TelemetryGPBTable* internal_default_instance() {
    return reinterpret_cast<const TelemetryGPBTable*>(
               &_TelemetryGPBTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TelemetryGPBTable& a, TelemetryGPBTable& b) {
    a.Swap(&b);
  }
  inline void Swap(TelemetryGPBTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TelemetryGPBTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TelemetryGPBTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TelemetryGPBTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TelemetryGPBTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TelemetryGPBTable& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TelemetryGPBTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cisco_telemetry.TelemetryGPBTable";
  }
  protected:
  explicit TelemetryGPBTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowFieldNumber = 1,
  };
  // repeated .cisco_telemetry.TelemetryRowGPB row = 1;
  int row_size() const;
  private:
  int _internal_row_size() const;
  public:
  void clear_row();
  ::cisco_telemetry::TelemetryRowGPB* mutable_row(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cisco_telemetry::TelemetryRowGPB >*
      mutable_row();
  private:
  const ::cisco_telemetry::TelemetryRowGPB& _internal_row(int index) const;
  ::cisco_telemetry::TelemetryRowGPB* _internal_add_row();
  public:
  const ::cisco_telemetry::TelemetryRowGPB& row(int index) const;
  ::cisco_telemetry::TelemetryRowGPB* add_row();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cisco_telemetry::TelemetryRowGPB >&
      row() const;

  // @@protoc_insertion_point(class_scope:cisco_telemetry.TelemetryGPBTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cisco_telemetry::TelemetryRowGPB > row_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cisco_5ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class TelemetryRowGPB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cisco_telemetry.TelemetryRowGPB) */ {
 public:
  inline TelemetryRowGPB() : TelemetryRowGPB(nullptr) {}
  ~TelemetryRowGPB() override;
  explicit constexpr TelemetryRowGPB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TelemetryRowGPB(const TelemetryRowGPB& from);
  TelemetryRowGPB(TelemetryRowGPB&& from) noexcept
    : TelemetryRowGPB() {
    *this = ::std::move(from);
  }

  inline TelemetryRowGPB& operator=(const TelemetryRowGPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline TelemetryRowGPB& operator=(TelemetryRowGPB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TelemetryRowGPB& default_instance() {
    return *internal_default_instance();
  }
  static inline const TelemetryRowGPB* internal_default_instance() {
    return reinterpret_cast<const TelemetryRowGPB*>(
               &_TelemetryRowGPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TelemetryRowGPB& a, TelemetryRowGPB& b) {
    a.Swap(&b);
  }
  inline void Swap(TelemetryRowGPB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TelemetryRowGPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TelemetryRowGPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TelemetryRowGPB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TelemetryRowGPB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TelemetryRowGPB& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TelemetryRowGPB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cisco_telemetry.TelemetryRowGPB";
  }
  protected:
  explicit TelemetryRowGPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 10,
    kContentFieldNumber = 11,
    kTimestampFieldNumber = 1,
  };
  // bytes keys = 10;
  void clear_keys();
  const std::string& keys() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keys(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keys();
  PROTOBUF_NODISCARD std::string* release_keys();
  void set_allocated_keys(std::string* keys);
  private:
  const std::string& _internal_keys() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keys(const std::string& value);
  std::string* _internal_mutable_keys();
  public:

  // bytes content = 11;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // uint64 timestamp = 1;
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cisco_telemetry.TelemetryRowGPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  uint64_t timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cisco_5ftelemetry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Telemetry

// string node_id_str = 1;
inline bool Telemetry::_internal_has_node_id_str() const {
  return node_id_case() == kNodeIdStr;
}
inline bool Telemetry::has_node_id_str() const {
  return _internal_has_node_id_str();
}
inline void Telemetry::set_has_node_id_str() {
  _oneof_case_[0] = kNodeIdStr;
}
inline void Telemetry::clear_node_id_str() {
  if (_internal_has_node_id_str()) {
    node_id_.node_id_str_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_node_id();
  }
}
inline const std::string& Telemetry::node_id_str() const {
  // @@protoc_insertion_point(field_get:cisco_telemetry.Telemetry.node_id_str)
  return _internal_node_id_str();
}
template <typename ArgT0, typename... ArgT>
inline void Telemetry::set_node_id_str(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_node_id_str()) {
    clear_node_id();
    set_has_node_id_str();
    node_id_.node_id_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  node_id_.node_id_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cisco_telemetry.Telemetry.node_id_str)
}
inline std::string* Telemetry::mutable_node_id_str() {
  std::string* _s = _internal_mutable_node_id_str();
  // @@protoc_insertion_point(field_mutable:cisco_telemetry.Telemetry.node_id_str)
  return _s;
}
inline const std::string& Telemetry::_internal_node_id_str() const {
  if (_internal_has_node_id_str()) {
    return node_id_.node_id_str_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Telemetry::_internal_set_node_id_str(const std::string& value) {
  if (!_internal_has_node_id_str()) {
    clear_node_id();
    set_has_node_id_str();
    node_id_.node_id_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  node_id_.node_id_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Telemetry::_internal_mutable_node_id_str() {
  if (!_internal_has_node_id_str()) {
    clear_node_id();
    set_has_node_id_str();
    node_id_.node_id_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return node_id_.node_id_str_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Telemetry::release_node_id_str() {
  // @@protoc_insertion_point(field_release:cisco_telemetry.Telemetry.node_id_str)
  if (_internal_has_node_id_str()) {
    clear_has_node_id();
    return node_id_.node_id_str_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Telemetry::set_allocated_node_id_str(std::string* node_id_str) {
  if (has_node_id()) {
    clear_node_id();
  }
  if (node_id_str != nullptr) {
    set_has_node_id_str();
    node_id_.node_id_str_.UnsafeSetDefault(node_id_str);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(node_id_str);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:cisco_telemetry.Telemetry.node_id_str)
}

// string subscription_id_str = 3;
inline bool Telemetry::_internal_has_subscription_id_str() const {
  return subscription_case() == kSubscriptionIdStr;
}
inline bool Telemetry::has_subscription_id_str() const {
  return _internal_has_subscription_id_str();
}
inline void Telemetry::set_has_subscription_id_str() {
  _oneof_case_[1] = kSubscriptionIdStr;
}
inline void Telemetry::clear_subscription_id_str() {
  if (_internal_has_subscription_id_str()) {
    subscription_.subscription_id_str_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_subscription();
  }
}
inline const std::string& Telemetry::subscription_id_str() const {
  // @@protoc_insertion_point(field_get:cisco_telemetry.Telemetry.subscription_id_str)
  return _internal_subscription_id_str();
}
template <typename ArgT0, typename... ArgT>
inline void Telemetry::set_subscription_id_str(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_subscription_id_str()) {
    clear_subscription();
    set_has_subscription_id_str();
    subscription_.subscription_id_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  subscription_.subscription_id_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cisco_telemetry.Telemetry.subscription_id_str)
}
inline std::string* Telemetry::mutable_subscription_id_str() {
  std::string* _s = _internal_mutable_subscription_id_str();
  // @@protoc_insertion_point(field_mutable:cisco_telemetry.Telemetry.subscription_id_str)
  return _s;
}
inline const std::string& Telemetry::_internal_subscription_id_str() const {
  if (_internal_has_subscription_id_str()) {
    return subscription_.subscription_id_str_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Telemetry::_internal_set_subscription_id_str(const std::string& value) {
  if (!_internal_has_subscription_id_str()) {
    clear_subscription();
    set_has_subscription_id_str();
    subscription_.subscription_id_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  subscription_.subscription_id_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Telemetry::_internal_mutable_subscription_id_str() {
  if (!_internal_has_subscription_id_str()) {
    clear_subscription();
    set_has_subscription_id_str();
    subscription_.subscription_id_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return subscription_.subscription_id_str_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Telemetry::release_subscription_id_str() {
  // @@protoc_insertion_point(field_release:cisco_telemetry.Telemetry.subscription_id_str)
  if (_internal_has_subscription_id_str()) {
    clear_has_subscription();
    return subscription_.subscription_id_str_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Telemetry::set_allocated_subscription_id_str(std::string* subscription_id_str) {
  if (has_subscription()) {
    clear_subscription();
  }
  if (subscription_id_str != nullptr) {
    set_has_subscription_id_str();
    subscription_.subscription_id_str_.UnsafeSetDefault(subscription_id_str);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(subscription_id_str);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:cisco_telemetry.Telemetry.subscription_id_str)
}

// string encoding_path = 6;
inline void Telemetry::clear_encoding_path() {
  encoding_path_.ClearToEmpty();
}
inline const std::string& Telemetry::encoding_path() const {
  // @@protoc_insertion_point(field_get:cisco_telemetry.Telemetry.encoding_path)
  return _internal_encoding_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Telemetry::set_encoding_path(ArgT0&& arg0, ArgT... args) {
 
 encoding_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cisco_telemetry.Telemetry.encoding_path)
}
inline std::string* Telemetry::mutable_encoding_path() {
  std::string* _s = _internal_mutable_encoding_path();
  // @@protoc_insertion_point(field_mutable:cisco_telemetry.Telemetry.encoding_path)
  return _s;
}
inline const std::string& Telemetry::_internal_encoding_path() const {
  return encoding_path_.Get();
}
inline void Telemetry::_internal_set_encoding_path(const std::string& value) {
  
  encoding_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Telemetry::_internal_mutable_encoding_path() {
  
  return encoding_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Telemetry::release_encoding_path() {
  // @@protoc_insertion_point(field_release:cisco_telemetry.Telemetry.encoding_path)
  return encoding_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Telemetry::set_allocated_encoding_path(std::string* encoding_path) {
  if (encoding_path != nullptr) {
    
  } else {
    
  }
  encoding_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoding_path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encoding_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encoding_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cisco_telemetry.Telemetry.encoding_path)
}

// string model_version = 7;
inline void Telemetry::clear_model_version() {
  model_version_.ClearToEmpty();
}
inline const std::string& Telemetry::model_version() const {
  // @@protoc_insertion_point(field_get:cisco_telemetry.Telemetry.model_version)
  return _internal_model_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Telemetry::set_model_version(ArgT0&& arg0, ArgT... args) {
 
 model_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cisco_telemetry.Telemetry.model_version)
}
inline std::string* Telemetry::mutable_model_version() {
  std::string* _s = _internal_mutable_model_version();
  // @@protoc_insertion_point(field_mutable:cisco_telemetry.Telemetry.model_version)
  return _s;
}
inline const std::string& Telemetry::_internal_model_version() const {
  return model_version_.Get();
}
inline void Telemetry::_internal_set_model_version(const std::string& value) {
  
  model_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Telemetry::_internal_mutable_model_version() {
  
  return model_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Telemetry::release_model_version() {
  // @@protoc_insertion_point(field_release:cisco_telemetry.Telemetry.model_version)
  return model_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Telemetry::set_allocated_model_version(std::string* model_version) {
  if (model_version != nullptr) {
    
  } else {
    
  }
  model_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cisco_telemetry.Telemetry.model_version)
}

// uint64 collection_id = 8;
inline void Telemetry::clear_collection_id() {
  collection_id_ = uint64_t{0u};
}
inline uint64_t Telemetry::_internal_collection_id() const {
  return collection_id_;
}
inline uint64_t Telemetry::collection_id() const {
  // @@protoc_insertion_point(field_get:cisco_telemetry.Telemetry.collection_id)
  return _internal_collection_id();
}
inline void Telemetry::_internal_set_collection_id(uint64_t value) {
  
  collection_id_ = value;
}
inline void Telemetry::set_collection_id(uint64_t value) {
  _internal_set_collection_id(value);
  // @@protoc_insertion_point(field_set:cisco_telemetry.Telemetry.collection_id)
}

// uint64 collection_start_time = 9;
inline void Telemetry::clear_collection_start_time() {
  collection_start_time_ = uint64_t{0u};
}
inline uint64_t Telemetry::_internal_collection_start_time() const {
  return collection_start_time_;
}
inline uint64_t Telemetry::collection_start_time() const {
  // @@protoc_insertion_point(field_get:cisco_telemetry.Telemetry.collection_start_time)
  return _internal_collection_start_time();
}
inline void Telemetry::_internal_set_collection_start_time(uint64_t value) {
  
  collection_start_time_ = value;
}
inline void Telemetry::set_collection_start_time(uint64_t value) {
  _internal_set_collection_start_time(value);
  // @@protoc_insertion_point(field_set:cisco_telemetry.Telemetry.collection_start_time)
}

// uint64 msg_timestamp = 10;
inline void Telemetry::clear_msg_timestamp() {
  msg_timestamp_ = uint64_t{0u};
}
inline uint64_t Telemetry::_internal_msg_timestamp() const {
  return msg_timestamp_;
}
inline uint64_t Telemetry::msg_timestamp() const {
  // @@protoc_insertion_point(field_get:cisco_telemetry.Telemetry.msg_timestamp)
  return _internal_msg_timestamp();
}
inline void Telemetry::_internal_set_msg_timestamp(uint64_t value) {
  
  msg_timestamp_ = value;
}
inline void Telemetry::set_msg_timestamp(uint64_t value) {
  _internal_set_msg_timestamp(value);
  // @@protoc_insertion_point(field_set:cisco_telemetry.Telemetry.msg_timestamp)
}

// repeated .cisco_telemetry.TelemetryField data_gpbkv = 11;
inline int Telemetry::_internal_data_gpbkv_size() const {
  return data_gpbkv_.size();
}
inline int Telemetry::data_gpbkv_size() const {
  return _internal_data_gpbkv_size();
}
inline void Telemetry::clear_data_gpbkv() {
  data_gpbkv_.Clear();
}
inline ::cisco_telemetry::TelemetryField* Telemetry::mutable_data_gpbkv(int index) {
  // @@protoc_insertion_point(field_mutable:cisco_telemetry.Telemetry.data_gpbkv)
  return data_gpbkv_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cisco_telemetry::TelemetryField >*
Telemetry::mutable_data_gpbkv() {
  // @@protoc_insertion_point(field_mutable_list:cisco_telemetry.Telemetry.data_gpbkv)
  return &data_gpbkv_;
}
inline const ::cisco_telemetry::TelemetryField& Telemetry::_internal_data_gpbkv(int index) const {
  return data_gpbkv_.Get(index);
}
inline const ::cisco_telemetry::TelemetryField& Telemetry::data_gpbkv(int index) const {
  // @@protoc_insertion_point(field_get:cisco_telemetry.Telemetry.data_gpbkv)
  return _internal_data_gpbkv(index);
}
inline ::cisco_telemetry::TelemetryField* Telemetry::_internal_add_data_gpbkv() {
  return data_gpbkv_.Add();
}
inline ::cisco_telemetry::TelemetryField* Telemetry::add_data_gpbkv() {
  ::cisco_telemetry::TelemetryField* _add = _internal_add_data_gpbkv();
  // @@protoc_insertion_point(field_add:cisco_telemetry.Telemetry.data_gpbkv)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cisco_telemetry::TelemetryField >&
Telemetry::data_gpbkv() const {
  // @@protoc_insertion_point(field_list:cisco_telemetry.Telemetry.data_gpbkv)
  return data_gpbkv_;
}

// .cisco_telemetry.TelemetryGPBTable data_gpb = 12;
inline bool Telemetry::_internal_has_data_gpb() const {
  return this != internal_default_instance() && data_gpb_ != nullptr;
}
inline bool Telemetry::has_data_gpb() const {
  return _internal_has_data_gpb();
}
inline void Telemetry::clear_data_gpb() {
  if (GetArenaForAllocation() == nullptr && data_gpb_ != nullptr) {
    delete data_gpb_;
  }
  data_gpb_ = nullptr;
}
inline const ::cisco_telemetry::TelemetryGPBTable& Telemetry::_internal_data_gpb() const {
  const ::cisco_telemetry::TelemetryGPBTable* p = data_gpb_;
  return p != nullptr ? *p : reinterpret_cast<const ::cisco_telemetry::TelemetryGPBTable&>(
      ::cisco_telemetry::_TelemetryGPBTable_default_instance_);
}
inline const ::cisco_telemetry::TelemetryGPBTable& Telemetry::data_gpb() const {
  // @@protoc_insertion_point(field_get:cisco_telemetry.Telemetry.data_gpb)
  return _internal_data_gpb();
}
inline void Telemetry::unsafe_arena_set_allocated_data_gpb(
    ::cisco_telemetry::TelemetryGPBTable* data_gpb) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_gpb_);
  }
  data_gpb_ = data_gpb;
  if (data_gpb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cisco_telemetry.Telemetry.data_gpb)
}
inline ::cisco_telemetry::TelemetryGPBTable* Telemetry::release_data_gpb() {
  
  ::cisco_telemetry::TelemetryGPBTable* temp = data_gpb_;
  data_gpb_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cisco_telemetry::TelemetryGPBTable* Telemetry::unsafe_arena_release_data_gpb() {
  // @@protoc_insertion_point(field_release:cisco_telemetry.Telemetry.data_gpb)
  
  ::cisco_telemetry::TelemetryGPBTable* temp = data_gpb_;
  data_gpb_ = nullptr;
  return temp;
}
inline ::cisco_telemetry::TelemetryGPBTable* Telemetry::_internal_mutable_data_gpb() {
  
  if (data_gpb_ == nullptr) {
    auto* p = CreateMaybeMessage<::cisco_telemetry::TelemetryGPBTable>(GetArenaForAllocation());
    data_gpb_ = p;
  }
  return data_gpb_;
}
inline ::cisco_telemetry::TelemetryGPBTable* Telemetry::mutable_data_gpb() {
  ::cisco_telemetry::TelemetryGPBTable* _msg = _internal_mutable_data_gpb();
  // @@protoc_insertion_point(field_mutable:cisco_telemetry.Telemetry.data_gpb)
  return _msg;
}
inline void Telemetry::set_allocated_data_gpb(::cisco_telemetry::TelemetryGPBTable* data_gpb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_gpb_;
  }
  if (data_gpb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::cisco_telemetry::TelemetryGPBTable>::GetOwningArena(data_gpb);
    if (message_arena != submessage_arena) {
      data_gpb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_gpb, submessage_arena);
    }
    
  } else {
    
  }
  data_gpb_ = data_gpb;
  // @@protoc_insertion_point(field_set_allocated:cisco_telemetry.Telemetry.data_gpb)
}

// uint64 collection_end_time = 13;
inline void Telemetry::clear_collection_end_time() {
  collection_end_time_ = uint64_t{0u};
}
inline uint64_t Telemetry::_internal_collection_end_time() const {
  return collection_end_time_;
}
inline uint64_t Telemetry::collection_end_time() const {
  // @@protoc_insertion_point(field_get:cisco_telemetry.Telemetry.collection_end_time)
  return _internal_collection_end_time();
}
inline void Telemetry::_internal_set_collection_end_time(uint64_t value) {
  
  collection_end_time_ = value;
}
inline void Telemetry::set_collection_end_time(uint64_t value) {
  _internal_set_collection_end_time(value);
  // @@protoc_insertion_point(field_set:cisco_telemetry.Telemetry.collection_end_time)
}

inline bool Telemetry::has_node_id() const {
  return node_id_case() != NODE_ID_NOT_SET;
}
inline void Telemetry::clear_has_node_id() {
  _oneof_case_[0] = NODE_ID_NOT_SET;
}
inline bool Telemetry::has_subscription() const {
  return subscription_case() != SUBSCRIPTION_NOT_SET;
}
inline void Telemetry::clear_has_subscription() {
  _oneof_case_[1] = SUBSCRIPTION_NOT_SET;
}
inline Telemetry::NodeIdCase Telemetry::node_id_case() const {
  return Telemetry::NodeIdCase(_oneof_case_[0]);
}
inline Telemetry::SubscriptionCase Telemetry::subscription_case() const {
  return Telemetry::SubscriptionCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// TelemetryField

// uint64 timestamp = 1;
inline void TelemetryField::clear_timestamp() {
  timestamp_ = uint64_t{0u};
}
inline uint64_t TelemetryField::_internal_timestamp() const {
  return timestamp_;
}
inline uint64_t TelemetryField::timestamp() const {
  // @@protoc_insertion_point(field_get:cisco_telemetry.TelemetryField.timestamp)
  return _internal_timestamp();
}
inline void TelemetryField::_internal_set_timestamp(uint64_t value) {
  
  timestamp_ = value;
}
inline void TelemetryField::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:cisco_telemetry.TelemetryField.timestamp)
}

// string name = 2;
inline void TelemetryField::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& TelemetryField::name() const {
  // @@protoc_insertion_point(field_get:cisco_telemetry.TelemetryField.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TelemetryField::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cisco_telemetry.TelemetryField.name)
}
inline std::string* TelemetryField::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cisco_telemetry.TelemetryField.name)
  return _s;
}
inline const std::string& TelemetryField::_internal_name() const {
  return name_.Get();
}
inline void TelemetryField::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TelemetryField::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TelemetryField::release_name() {
  // @@protoc_insertion_point(field_release:cisco_telemetry.TelemetryField.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TelemetryField::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cisco_telemetry.TelemetryField.name)
}

// bytes bytes_value = 4;
inline bool TelemetryField::_internal_has_bytes_value() const {
  return value_by_type_case() == kBytesValue;
}
inline bool TelemetryField::has_bytes_value() const {
  return _internal_has_bytes_value();
}
inline void TelemetryField::set_has_bytes_value() {
  _oneof_case_[0] = kBytesValue;
}
inline void TelemetryField::clear_bytes_value() {
  if (_internal_has_bytes_value()) {
    value_by_type_.bytes_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_value_by_type();
  }
}
inline const std::string& TelemetryField::bytes_value() const {
  // @@protoc_insertion_point(field_get:cisco_telemetry.TelemetryField.bytes_value)
  return _internal_bytes_value();
}
template <typename ArgT0, typename... ArgT>
inline void TelemetryField::set_bytes_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_bytes_value()) {
    clear_value_by_type();
    set_has_bytes_value();
    value_by_type_.bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_by_type_.bytes_value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cisco_telemetry.TelemetryField.bytes_value)
}
inline std::string* TelemetryField::mutable_bytes_value() {
  std::string* _s = _internal_mutable_bytes_value();
  // @@protoc_insertion_point(field_mutable:cisco_telemetry.TelemetryField.bytes_value)
  return _s;
}
inline const std::string& TelemetryField::_internal_bytes_value() const {
  if (_internal_has_bytes_value()) {
    return value_by_type_.bytes_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TelemetryField::_internal_set_bytes_value(const std::string& value) {
  if (!_internal_has_bytes_value()) {
    clear_value_by_type();
    set_has_bytes_value();
    value_by_type_.bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_by_type_.bytes_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TelemetryField::_internal_mutable_bytes_value() {
  if (!_internal_has_bytes_value()) {
    clear_value_by_type();
    set_has_bytes_value();
    value_by_type_.bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_by_type_.bytes_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TelemetryField::release_bytes_value() {
  // @@protoc_insertion_point(field_release:cisco_telemetry.TelemetryField.bytes_value)
  if (_internal_has_bytes_value()) {
    clear_has_value_by_type();
    return value_by_type_.bytes_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void TelemetryField::set_allocated_bytes_value(std::string* bytes_value) {
  if (has_value_by_type()) {
    clear_value_by_type();
  }
  if (bytes_value != nullptr) {
    set_has_bytes_value();
    value_by_type_.bytes_value_.UnsafeSetDefault(bytes_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(bytes_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:cisco_telemetry.TelemetryField.bytes_value)
}

// string string_value = 5;
inline bool TelemetryField::_internal_has_string_value() const {
  return value_by_type_case() == kStringValue;
}
inline bool TelemetryField::has_string_value() const {
  return _internal_has_string_value();
}
inline void TelemetryField::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void TelemetryField::clear_string_value() {
  if (_internal_has_string_value()) {
    value_by_type_.string_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_value_by_type();
  }
}
inline const std::string& TelemetryField::string_value() const {
  // @@protoc_insertion_point(field_get:cisco_telemetry.TelemetryField.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void TelemetryField::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_value_by_type();
    set_has_string_value();
    value_by_type_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_by_type_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cisco_telemetry.TelemetryField.string_value)
}
inline std::string* TelemetryField::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:cisco_telemetry.TelemetryField.string_value)
  return _s;
}
inline const std::string& TelemetryField::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return value_by_type_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TelemetryField::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_value_by_type();
    set_has_string_value();
    value_by_type_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_by_type_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TelemetryField::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_value_by_type();
    set_has_string_value();
    value_by_type_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_by_type_.string_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TelemetryField::release_string_value() {
  // @@protoc_insertion_point(field_release:cisco_telemetry.TelemetryField.string_value)
  if (_internal_has_string_value()) {
    clear_has_value_by_type();
    return value_by_type_.string_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void TelemetryField::set_allocated_string_value(std::string* string_value) {
  if (has_value_by_type()) {
    clear_value_by_type();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    value_by_type_.string_value_.UnsafeSetDefault(string_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(string_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:cisco_telemetry.TelemetryField.string_value)
}

// bool bool_value = 6;
inline bool TelemetryField::_internal_has_bool_value() const {
  return value_by_type_case() == kBoolValue;
}
inline bool TelemetryField::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void TelemetryField::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void TelemetryField::clear_bool_value() {
  if (_internal_has_bool_value()) {
    value_by_type_.bool_value_ = false;
    clear_has_value_by_type();
  }
}
inline bool TelemetryField::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return value_by_type_.bool_value_;
  }
  return false;
}
inline void TelemetryField::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_value_by_type();
    set_has_bool_value();
  }
  value_by_type_.bool_value_ = value;
}
inline bool TelemetryField::bool_value() const {
  // @@protoc_insertion_point(field_get:cisco_telemetry.TelemetryField.bool_value)
  return _internal_bool_value();
}
inline void TelemetryField::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:cisco_telemetry.TelemetryField.bool_value)
}

// uint32 uint32_value = 7;
inline bool TelemetryField::_internal_has_uint32_value() const {
  return value_by_type_case() == kUint32Value;
}
inline bool TelemetryField::has_uint32_value() const {
  return _internal_has_uint32_value();
}
inline void TelemetryField::set_has_uint32_value() {
  _oneof_case_[0] = kUint32Value;
}
inline void TelemetryField::clear_uint32_value() {
  if (_internal_has_uint32_value()) {
    value_by_type_.uint32_value_ = 0u;
    clear_has_value_by_type();
  }
}
inline uint32_t TelemetryField::_internal_uint32_value() const {
  if (_internal_has_uint32_value()) {
    return value_by_type_.uint32_value_;
  }
  return 0u;
}
inline void TelemetryField::_internal_set_uint32_value(uint32_t value) {
  if (!_internal_has_uint32_value()) {
    clear_value_by_type();
    set_has_uint32_value();
  }
  value_by_type_.uint32_value_ = value;
}
inline uint32_t TelemetryField::uint32_value() const {
  // @@protoc_insertion_point(field_get:cisco_telemetry.TelemetryField.uint32_value)
  return _internal_uint32_value();
}
inline void TelemetryField::set_uint32_value(uint32_t value) {
  _internal_set_uint32_value(value);
  // @@protoc_insertion_point(field_set:cisco_telemetry.TelemetryField.uint32_value)
}

// uint64 uint64_value = 8;
inline bool TelemetryField::_internal_has_uint64_value() const {
  return value_by_type_case() == kUint64Value;
}
inline bool TelemetryField::has_uint64_value() const {
  return _internal_has_uint64_value();
}
inline void TelemetryField::set_has_uint64_value() {
  _oneof_case_[0] = kUint64Value;
}
inline void TelemetryField::clear_uint64_value() {
  if (_internal_has_uint64_value()) {
    value_by_type_.uint64_value_ = uint64_t{0u};
    clear_has_value_by_type();
  }
}
inline uint64_t TelemetryField::_internal_uint64_value() const {
  if (_internal_has_uint64_value()) {
    return value_by_type_.uint64_value_;
  }
  return uint64_t{0u};
}
inline void TelemetryField::_internal_set_uint64_value(uint64_t value) {
  if (!_internal_has_uint64_value()) {
    clear_value_by_type();
    set_has_uint64_value();
  }
  value_by_type_.uint64_value_ = value;
}
inline uint64_t TelemetryField::uint64_value() const {
  // @@protoc_insertion_point(field_get:cisco_telemetry.TelemetryField.uint64_value)
  return _internal_uint64_value();
}
inline void TelemetryField::set_uint64_value(uint64_t value) {
  _internal_set_uint64_value(value);
  // @@protoc_insertion_point(field_set:cisco_telemetry.TelemetryField.uint64_value)
}

// sint32 sint32_value = 9;
inline bool TelemetryField::_internal_has_sint32_value() const {
  return value_by_type_case() == kSint32Value;
}
inline bool TelemetryField::has_sint32_value() const {
  return _internal_has_sint32_value();
}
inline void TelemetryField::set_has_sint32_value() {
  _oneof_case_[0] = kSint32Value;
}
inline void TelemetryField::clear_sint32_value() {
  if (_internal_has_sint32_value()) {
    value_by_type_.sint32_value_ = 0;
    clear_has_value_by_type();
  }
}
inline int32_t TelemetryField::_internal_sint32_value() const {
  if (_internal_has_sint32_value()) {
    return value_by_type_.sint32_value_;
  }
  return 0;
}
inline void TelemetryField::_internal_set_sint32_value(int32_t value) {
  if (!_internal_has_sint32_value()) {
    clear_value_by_type();
    set_has_sint32_value();
  }
  value_by_type_.sint32_value_ = value;
}
inline int32_t TelemetryField::sint32_value() const {
  // @@protoc_insertion_point(field_get:cisco_telemetry.TelemetryField.sint32_value)
  return _internal_sint32_value();
}
inline void TelemetryField::set_sint32_value(int32_t value) {
  _internal_set_sint32_value(value);
  // @@protoc_insertion_point(field_set:cisco_telemetry.TelemetryField.sint32_value)
}

// sint64 sint64_value = 10;
inline bool TelemetryField::_internal_has_sint64_value() const {
  return value_by_type_case() == kSint64Value;
}
inline bool TelemetryField::has_sint64_value() const {
  return _internal_has_sint64_value();
}
inline void TelemetryField::set_has_sint64_value() {
  _oneof_case_[0] = kSint64Value;
}
inline void TelemetryField::clear_sint64_value() {
  if (_internal_has_sint64_value()) {
    value_by_type_.sint64_value_ = int64_t{0};
    clear_has_value_by_type();
  }
}
inline int64_t TelemetryField::_internal_sint64_value() const {
  if (_internal_has_sint64_value()) {
    return value_by_type_.sint64_value_;
  }
  return int64_t{0};
}
inline void TelemetryField::_internal_set_sint64_value(int64_t value) {
  if (!_internal_has_sint64_value()) {
    clear_value_by_type();
    set_has_sint64_value();
  }
  value_by_type_.sint64_value_ = value;
}
inline int64_t TelemetryField::sint64_value() const {
  // @@protoc_insertion_point(field_get:cisco_telemetry.TelemetryField.sint64_value)
  return _internal_sint64_value();
}
inline void TelemetryField::set_sint64_value(int64_t value) {
  _internal_set_sint64_value(value);
  // @@protoc_insertion_point(field_set:cisco_telemetry.TelemetryField.sint64_value)
}

// double double_value = 11;
inline bool TelemetryField::_internal_has_double_value() const {
  return value_by_type_case() == kDoubleValue;
}
inline bool TelemetryField::has_double_value() const {
  return _internal_has_double_value();
}
inline void TelemetryField::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void TelemetryField::clear_double_value() {
  if (_internal_has_double_value()) {
    value_by_type_.double_value_ = 0;
    clear_has_value_by_type();
  }
}
inline double TelemetryField::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return value_by_type_.double_value_;
  }
  return 0;
}
inline void TelemetryField::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_value_by_type();
    set_has_double_value();
  }
  value_by_type_.double_value_ = value;
}
inline double TelemetryField::double_value() const {
  // @@protoc_insertion_point(field_get:cisco_telemetry.TelemetryField.double_value)
  return _internal_double_value();
}
inline void TelemetryField::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:cisco_telemetry.TelemetryField.double_value)
}

// float float_value = 12;
inline bool TelemetryField::_internal_has_float_value() const {
  return value_by_type_case() == kFloatValue;
}
inline bool TelemetryField::has_float_value() const {
  return _internal_has_float_value();
}
inline void TelemetryField::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
inline void TelemetryField::clear_float_value() {
  if (_internal_has_float_value()) {
    value_by_type_.float_value_ = 0;
    clear_has_value_by_type();
  }
}
inline float TelemetryField::_internal_float_value() const {
  if (_internal_has_float_value()) {
    return value_by_type_.float_value_;
  }
  return 0;
}
inline void TelemetryField::_internal_set_float_value(float value) {
  if (!_internal_has_float_value()) {
    clear_value_by_type();
    set_has_float_value();
  }
  value_by_type_.float_value_ = value;
}
inline float TelemetryField::float_value() const {
  // @@protoc_insertion_point(field_get:cisco_telemetry.TelemetryField.float_value)
  return _internal_float_value();
}
inline void TelemetryField::set_float_value(float value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:cisco_telemetry.TelemetryField.float_value)
}

// repeated .cisco_telemetry.TelemetryField fields = 15;
inline int TelemetryField::_internal_fields_size() const {
  return fields_.size();
}
inline int TelemetryField::fields_size() const {
  return _internal_fields_size();
}
inline void TelemetryField::clear_fields() {
  fields_.Clear();
}
inline ::cisco_telemetry::TelemetryField* TelemetryField::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:cisco_telemetry.TelemetryField.fields)
  return fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cisco_telemetry::TelemetryField >*
TelemetryField::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:cisco_telemetry.TelemetryField.fields)
  return &fields_;
}
inline const ::cisco_telemetry::TelemetryField& TelemetryField::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const ::cisco_telemetry::TelemetryField& TelemetryField::fields(int index) const {
  // @@protoc_insertion_point(field_get:cisco_telemetry.TelemetryField.fields)
  return _internal_fields(index);
}
inline ::cisco_telemetry::TelemetryField* TelemetryField::_internal_add_fields() {
  return fields_.Add();
}
inline ::cisco_telemetry::TelemetryField* TelemetryField::add_fields() {
  ::cisco_telemetry::TelemetryField* _add = _internal_add_fields();
  // @@protoc_insertion_point(field_add:cisco_telemetry.TelemetryField.fields)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cisco_telemetry::TelemetryField >&
TelemetryField::fields() const {
  // @@protoc_insertion_point(field_list:cisco_telemetry.TelemetryField.fields)
  return fields_;
}

// bool delete = 16;
inline void TelemetryField::clear_delete_() {
  delete__ = false;
}
inline bool TelemetryField::_internal_delete_() const {
  return delete__;
}
inline bool TelemetryField::delete_() const {
  // @@protoc_insertion_point(field_get:cisco_telemetry.TelemetryField.delete)
  return _internal_delete_();
}
inline void TelemetryField::_internal_set_delete_(bool value) {
  
  delete__ = value;
}
inline void TelemetryField::set_delete_(bool value) {
  _internal_set_delete_(value);
  // @@protoc_insertion_point(field_set:cisco_telemetry.TelemetryField.delete)
}

inline bool TelemetryField::has_value_by_type() const {
  return value_by_type_case() != VALUE_BY_TYPE_NOT_SET;
}
inline void TelemetryField::clear_has_value_by_type() {
  _oneof_case_[0] = VALUE_BY_TYPE_NOT_SET;
}
inline TelemetryField::ValueByTypeCase TelemetryField::value_by_type_case() const {
  return TelemetryField::ValueByTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TelemetryGPBTable

// repeated .cisco_telemetry.TelemetryRowGPB row = 1;
inline int TelemetryGPBTable::_internal_row_size() const {
  return row_.size();
}
inline int TelemetryGPBTable::row_size() const {
  return _internal_row_size();
}
inline void TelemetryGPBTable::clear_row() {
  row_.Clear();
}
inline ::cisco_telemetry::TelemetryRowGPB* TelemetryGPBTable::mutable_row(int index) {
  // @@protoc_insertion_point(field_mutable:cisco_telemetry.TelemetryGPBTable.row)
  return row_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cisco_telemetry::TelemetryRowGPB >*
TelemetryGPBTable::mutable_row() {
  // @@protoc_insertion_point(field_mutable_list:cisco_telemetry.TelemetryGPBTable.row)
  return &row_;
}
inline const ::cisco_telemetry::TelemetryRowGPB& TelemetryGPBTable::_internal_row(int index) const {
  return row_.Get(index);
}
inline const ::cisco_telemetry::TelemetryRowGPB& TelemetryGPBTable::row(int index) const {
  // @@protoc_insertion_point(field_get:cisco_telemetry.TelemetryGPBTable.row)
  return _internal_row(index);
}
inline ::cisco_telemetry::TelemetryRowGPB* TelemetryGPBTable::_internal_add_row() {
  return row_.Add();
}
inline ::cisco_telemetry::TelemetryRowGPB* TelemetryGPBTable::add_row() {
  ::cisco_telemetry::TelemetryRowGPB* _add = _internal_add_row();
  // @@protoc_insertion_point(field_add:cisco_telemetry.TelemetryGPBTable.row)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cisco_telemetry::TelemetryRowGPB >&
TelemetryGPBTable::row() const {
  // @@protoc_insertion_point(field_list:cisco_telemetry.TelemetryGPBTable.row)
  return row_;
}

// -------------------------------------------------------------------

// TelemetryRowGPB

// uint64 timestamp = 1;
inline void TelemetryRowGPB::clear_timestamp() {
  timestamp_ = uint64_t{0u};
}
inline uint64_t TelemetryRowGPB::_internal_timestamp() const {
  return timestamp_;
}
inline uint64_t TelemetryRowGPB::timestamp() const {
  // @@protoc_insertion_point(field_get:cisco_telemetry.TelemetryRowGPB.timestamp)
  return _internal_timestamp();
}
inline void TelemetryRowGPB::_internal_set_timestamp(uint64_t value) {
  
  timestamp_ = value;
}
inline void TelemetryRowGPB::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:cisco_telemetry.TelemetryRowGPB.timestamp)
}

// bytes keys = 10;
inline void TelemetryRowGPB::clear_keys() {
  keys_.ClearToEmpty();
}
inline const std::string& TelemetryRowGPB::keys() const {
  // @@protoc_insertion_point(field_get:cisco_telemetry.TelemetryRowGPB.keys)
  return _internal_keys();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TelemetryRowGPB::set_keys(ArgT0&& arg0, ArgT... args) {
 
 keys_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cisco_telemetry.TelemetryRowGPB.keys)
}
inline std::string* TelemetryRowGPB::mutable_keys() {
  std::string* _s = _internal_mutable_keys();
  // @@protoc_insertion_point(field_mutable:cisco_telemetry.TelemetryRowGPB.keys)
  return _s;
}
inline const std::string& TelemetryRowGPB::_internal_keys() const {
  return keys_.Get();
}
inline void TelemetryRowGPB::_internal_set_keys(const std::string& value) {
  
  keys_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TelemetryRowGPB::_internal_mutable_keys() {
  
  return keys_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TelemetryRowGPB::release_keys() {
  // @@protoc_insertion_point(field_release:cisco_telemetry.TelemetryRowGPB.keys)
  return keys_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TelemetryRowGPB::set_allocated_keys(std::string* keys) {
  if (keys != nullptr) {
    
  } else {
    
  }
  keys_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keys,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (keys_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    keys_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cisco_telemetry.TelemetryRowGPB.keys)
}

// bytes content = 11;
inline void TelemetryRowGPB::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& TelemetryRowGPB::content() const {
  // @@protoc_insertion_point(field_get:cisco_telemetry.TelemetryRowGPB.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TelemetryRowGPB::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cisco_telemetry.TelemetryRowGPB.content)
}
inline std::string* TelemetryRowGPB::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:cisco_telemetry.TelemetryRowGPB.content)
  return _s;
}
inline const std::string& TelemetryRowGPB::_internal_content() const {
  return content_.Get();
}
inline void TelemetryRowGPB::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TelemetryRowGPB::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TelemetryRowGPB::release_content() {
  // @@protoc_insertion_point(field_release:cisco_telemetry.TelemetryRowGPB.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TelemetryRowGPB::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cisco_telemetry.TelemetryRowGPB.content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cisco_telemetry

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cisco_5ftelemetry_2eproto
